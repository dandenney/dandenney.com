---
layout: post-custom
title: Rethinking My eMMail Workflow
tags: Front-End Dev
date: June 21, 2016
code-sample: true
---

:sass
  body
    background: #f6f7f8

  h1,
  h2,
  h3,
  h4,
  h5
    color: #616f7d

  .intro
    overflow: hidden
    position: relative

    .mask-tri
      position: relative
      z-index: 1

    &:after
      bottom: 35%
      box-shadow: 0 20px 20px rgba(#000, 0.1)
      content: ""
      left: -25%
      position: absolute
      right: -25%
      transform: rotate(-7deg)
      top: 0

  .nudge
    margin-top: -3.5em

  article a
    color: #e8703d
    transition: color 0.3s linear

    &:hover
      color: mix(#000, #e8703d, 20%)

    &::before,
    &::after
      background: mix(#fff, #616f7d, 80%)

  .img-stretch
    border: 10px solid #fff
    box-shadow: 0 2px 5px rgba(#000, 0.15)
    left: -50px
    max-width: 800px
    position: relative

.intro

  <svg class="mask-tri" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="100%" viewBox="0 0 1002 216"><defs><clipPath id="clip-path" transform="translate(2)"><polygon points="-1 0 -1 216 1001 85 1001 0 -1 0" style="fill:none"/></clipPath></defs><title>rethinking</title><polygon points="0 0 0 216 1002 85 1002 0 0 0" style="fill:#fff"/><g style="clip-path:url(#clip-path)"><text transform="translate(145 136.67)" style="font-size:118.29645538330078px;fill:#616f7d;font-family:Gibson;font-weight:700">RETHINKING</text></g></svg>

%section.row.nudge
  .cell.cell--s
    %article

      <svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" width="100%" viewBox="0 0 669.63 72.74"><title>my-emmail-workflow</title><text transform="translate(0 58.43)" style="font-size:63.5px;fill:#616f7d;font-family:Gibson;font-weight:700">My eMMail Workflow</text></svg>

      %p
        In 2015, I was lucky enough to get to share <a href="https://speakerdeck.com/dandenney/the-organized-chaos-of-email-creation">The Organized Chaos of Email</a> Creation at <a href="https://litmus.com/conference">The Email Design Conference</a>. While I was on stage, people from the Litmus team were in the lobby demoing a game-changer: live client previews built into <a href="https://litmus.com/email-builder">Builder</a>.

      %p
        It instantly became a part of my workflow and since then I don't send an email without it. (Well I have, but it ended up borked in Gmail, sooo.) In my talk, I touted the benefits of building offline in a Middleman app I dubbed eMMail. The perks of doing so were reusable variables, partials, and custom reporting. Throughout the year, the Litmus folks have added a couple of those into Builder as well.

      %p
        Variables have other uses but are super handy for setting analytics trackers throughout your links, which they added. Plus, the on-the-fly CSS inlining removes a lot of the need for variables if you're using classes.

      %p
        Partials are now in beta and working well. This was the big one for me as I maintain 40+ transactional emails. When something needs to change in our header or footer, it has to change in every file. This was the primary reason I was using Middleman and it's in Builder now.

      %p
        I doubt they'll tackle the reporting bit anytime soon since that's more related to your ESP, but I hit a wall with mine. I want historical data to show performance of an email over time and that isn't straight-forward when hijacking the frontmatter in Middleman. It's super easy and readable in a Google Docs spreadsheet, though.

      %img.img-stretch{ src: "/assets/images/posts/front-end-dev/rethinking-my-emmail-workflow/screenshot-spreadsheet.png", width: "800" }

      %h2.mtm I'm Out of Excuses

      %p
        At this point, I don't have any excuses left to be building/maintaining my own system. Sure, I can use Sass for the 2-6 lines of CSS I put in a `style` tag per email and I can set variables so that my snippets are short and abstract. (This was also countered by the option of using classes and CSS inlining in Builder).

      %pre
        %code.language-ruby
          :escaped
            # Tell Ruby to use its CSV library of functions
            require "csv"

            # Create an array from big values
            big = ["one@email.com", "two@email.com", "three@email.com", "four@email.com", "five@email.com"]

            # Create an array from little values
            little = ["four@email.com", "five@email.com", "six@email.com", "seven@email.com", "eight@email.com"]

            # Remove any entries in little from big and make a new array with the result
            lessbig = big - little

            # Create a CSV from the new array
            CSV.open("lessbig.csv", "wb") do |row|
              lessbig.each do |data|
                row << [data]
              end
            end

            CSV.open("lessbig.csv", "wb") do |csv|
              csv << lessbig
            end

      %h2.mtm WTF

      %p
        When I switched to using CSVs, things were formatted differently (an array of arrays). I fought through by throwing some of the various options from the doc into the code but nothing worked. So I used a lifeline and asked to see Drew's example.
