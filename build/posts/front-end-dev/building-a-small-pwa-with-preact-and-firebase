<!DOCTYPE html>
<html lang='en'>
<head>
<meta charset='utf-8'>
<meta content='IE=edge,chrome=1' http-equiv='X-UA-Compatible'>
<meta content='width=device-width, initial-scale=1.0' name='viewport'>
<!-- Use title if it's in the page YAML frontmatter -->
<title>Building a Small PWA with Preact and Firebase</title>
<!-- Typekit -->
<script src="//use.typekit.net/ddg5xff.js"></script>
<script>try{Typekit.load();}catch(e){}</script>
<link href="../../assets/stylesheets/application.css" rel="stylesheet" />
<link href="../../assets/stylesheets/vendor/prism.css" rel="stylesheet" />
</head>
<body class='posts posts_front-end-dev posts_front-end-dev_building-a-small-pwa-with-preact-and-firebase'>
<header>
<p class='dib'>
Dan Denney
</p>
<nav class='dib'>
<a class="mls" href="/posts">Posts</a>
<a class="mls" href="/blips">Blips</a>
<a class="mls" href="/tinkerings">Tinkerings</a>
<a class="mls" href="/">Home</a>
</nav>
</header>

<style>
  /* line 1, (__TEMPLATE__) */
  h1 {
    margin-top: 0.5em; }
    @media screen and (min-width: 840px) {
      /* line 1, (__TEMPLATE__) */
      h1 {
        font-size: 250%;
        line-height: 1.2; } }
  
  /* line 7, (__TEMPLATE__) */
  .list {
    padding-left: 1.75em; }
    /* line 10, (__TEMPLATE__) */
    .list > li {
      list-style: disc; }
  
  /* line 13, (__TEMPLATE__) */
  .stretch {
    border: 10px solid #ffffff;
    box-sizing: border-box;
    position: relative; }
    @media screen and (min-width: 840px) {
      /* line 13, (__TEMPLATE__) */
      .stretch {
        left: -50px;
        max-width: 800px;
        width: 800px; } }
  
  /* line 23, (__TEMPLATE__) */
  .stretch--a {
    border: 2px solid #f5f5f5;
    padding: 1em; }
  
  /* line 27, (__TEMPLATE__) */
  .stretch--b {
    border: 0;
    box-shadow: none; }
  
  /* line 31, (__TEMPLATE__) */
  .commit {
    background: #f5f5f5;
    cursor: pointer;
    display: block;
    font-size: 16px;
    margin-top: 0.5em;
    padding: 0 16px;
    width: 3em; }
  
  /* line 40, (__TEMPLATE__) */
  .code-inline {
    background: #f5f5f5;
    color: #535353;
    display: inline-block;
    font-size: 75%;
    padding: 0 0.5em; }
  
  /* line 47, (__TEMPLATE__) */
  strong {
    font-weight: 600; }
  
  /* line 50, (__TEMPLATE__) */
  pre {
    font-size: 16px; }
  
  /* line 53, (__TEMPLATE__) */
  pre[class*="language-"] {
    border-radius: 0;
    margin-bottom: 2em; }
    @media screen and (min-width: 840px) {
      /* line 53, (__TEMPLATE__) */
      pre[class*="language-"] {
        padding: 4em; } }
  
  /* line 60, (__TEMPLATE__) */
  .quick-links {
    align-items: center;
    border: 1px solid #f5f5f5;
    display: flex;
    justify-content: space-between; }
    /* line 66, (__TEMPLATE__) */
    .quick-links a {
      padding: 0.5em 1em;
      text-align: center;
      width: 50%; }
      /* line 71, (__TEMPLATE__) */
      .quick-links a + a {
        border-left: 1px solid #f5f5f5; }
  
  /* line 74, (__TEMPLATE__) */
  .toc {
    background: #fff;
    border: 1px solid #f5f5f5;
    padding: 1em; }
    /* line 79, (__TEMPLATE__) */
    .toc ol {
      margin: 0;
      padding: 0; }
    /* line 83, (__TEMPLATE__) */
    .toc li {
      margin: 0 0 0.5em 0;
      padding: 0; }
    @media screen and (min-width: 1260px) {
      /* line 74, (__TEMPLATE__) */
      .toc {
        font-size: 67%;
        padding: 0.5em;
        position: fixed;
        right: 0.5em;
        top: 7em;
        z-index: 1; } }
  
  /* line 95, (__TEMPLATE__) */
  .temp-toc {
    margin: 0 0 1em 0;
    padding: 0; }
    /* line 98, (__TEMPLATE__) */
    .temp-toc li {
      margin: 0 0 0.5em 0;
      padding: 0; }
</style>
<div class='row'>
<div class='cell cell--s'>
<h1 class='mbf'>Building a Small PWA with Preact and Firebase</h1>
<small class='db mbs'>Read time: 29:33</small>
<div class='quick-links'>
<a href='https://pwa-preact-firebase.firebaseapp.com/'>Live Version</a>
<a href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase'>GitHub Repo</a>
</div>
<p class='h4 mbxs mtm' id='intro'>Disclaimer: This is not a tutorial!</p>
<p>
I have a ton of respect for the hard work that goes into using a project to teach the fundamentals of a technology. This isn't that, it's me sharing a process of learning by building something of my own.
</p>
<p>
If you’re looking for related tutorials, I learned from
<a href='https://reactforbeginners.com'>React for Beginners</a>,
<a href='https://egghead.io/courses/up-and-running-with-preact'>Up and running with Preact</a>,
<a href='https://frontendmasters.com/courses/firebase-react'>Firebase + React: Real-time, Serverless Web Apps</a>,
and
<a href='https://css-tricks.com/intro-firebase-react'>Intro to Firebase and React</a>.
</p>
<p>
In this post, I’m sharing how I did something, and it is currently at the “<a href='http://wiki.c2.com/?MakeItWorkMakeItRightMakeItFast'>make it work</a>” level. I’m 100% open to feedback on how to improve it, and I’ve taken extra steps in the process to make giving feedback easy. This doesn't just help me, but also anyone who reads this in the future. If you know of a way to make it better, please leave a comment on the post or a commit,
<a href='https://twitter.com/dandenney'>@ me</a>,
<a href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase'>create a PR</a>,
or write up a reaction post.
</p>
<h2>Sections</h2>
<ol class='temp-toc'>
<li>
<a href='#intro'>Intro (1:45)</a>
</li>
<li>
<a href='#getting-started'>Getting Started (1:40)</a>
</li>
<li>
<a href='#adding-firebase'>Adding Firebase for Auth (3:45)</a>
</li>
<li>
<a href='#removing-boilerplate'>Preact Auth and Organization (5:23)</a>
</li>
<li>
<a href='#planning-data'>Retrieving Data from Firebase (4:25)</a>
</li>
<li>
<a href='#connecting-a-form-to-firebase'>Saving Data to Firebase (5:44)</a>
</li>
<li>
<a href='#adding-global-styles'>Styling (1:45)</a>
</li>
<li>
<a href='#deploying-to-firebase'>Wrapping Up (1:44)</a>
</li>
</ol>
<h2 id='post-goals'>Post Goals</h2>
<p>The goals for this post are to share what I’ve learned, try out some new features (for me) in a blog post. It seems like a long post sharing open-source code could benefit from a Table of Contents, read time indicators, and commit links (41 of em).</p>
<h2 id='project-goals'>Project Goals</h2>
<p>The goals of this project were: reading/writing/manipulating data, designing a mobile UI and learning Preact. Preact is overkill for the base functionality, but the CLI version has features that are very beneficial.</p>
<h2 id='app-goals'>App Goals</h2>
<p>
I exercise because I greatly enjoy beer and food. I'm not that into it, but since I'm going to do it, I should follow a system created by people who are. I'm simplifying, but a handful of the systems tell you to set an initial weight, do a specific number of reps, and then raise the weight after 5 sessions of reps. (Some useful apps exist, like <a href="https://stronglifts.com">Strong Lifts</a>, but I wanted a customized version.) Most importantly, I wanted a dead simple UI that makes it clear what weight or speed I need to set when I get to the machine.
</p>
<h2 id='getting-started'>Getting Started With a Project</h2>
<p>
Since this was an app being designed for a demographic of 1 person, research was limited. I knew what was missing for me in other apps, and the style that I wanted. I use
<a href='http://www.bear-writer.com'>Bear</a>
for project details, and this had requirements, inspiration images, and my best guess at the data structure.
</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/notes.jpg'>
<p>
To allow for continually working on my version, I’m sharing the steps as I recreate the app in a
<a href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase'>repo</a>
specifically for this post.
</p>
<h2 id='preact-cli'>Initializing a Project with Preact CLI</h2>
<p>
I was inspired by
<a href='https://www.youtube.com/watch?v=aCMbSyngXB4'>Addy Osmani’s talk on Production PWAs with JS frameworks</a>,
in which he shares how the various CLIs added PWA support by default. Automated service worker setup alone makes this tool fantastic, but the
<a href='https://github.com/developit/preact-cli'>feature list</a>
is insane for 4.5kb.
</p>
<p>
My first step is always creating a repo via GitHub’s UI. It’s a personal preference, but it adds a step when you’re using a generator. That’s still preferable to me vs. initializing from the command line after generating.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/b3692cb0267ed7f1a1075ded896f58a5be39aa1f'>commit</a>
</p>
<img class='mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/github-repo.jpg'>
<p>
Sass support requires a flag, so after installing the CLI, I ran
<code class='code-inline'>preact create app --sass</code>
and then dragged the files out to my main folder.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/ba21e66db288a85e0ad8910f0e312b4347b7b937'>commit</a>
</p>
<div class='stretch stretch--a mbm'>
<h4 class='mtf'>A <strike>known</strike> fixed issue</h4>
<p class='mbf'>
In my first build, the 1.3 version would enable Sass support but still generate
<code class='code-inline'>.less</code>
files. In getting the link to the issue, I found that it was
<a href='https://github.com/developit/preact-cli/issues/32'>closed and fixed</a>
with 1.4, so I updated and regenerated.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/89b5c0fc507980aa66fda4805c1da269d33f959a'>commit</a>
</p>
</div>
<h2 id='its-alive'>It’s alive!</h2>
<p>
Running
<code class='code-inline'>preact watch</code>
(or the command of your choice) fires up a server on
<code class='code-inline'>0.0.0.0:8080</code>
and the starter app is visible.
</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/preact-cli-home.jpg'>
<p>The out-of-the-box Lighthouse scores are fantastic. (<a href="https://developers.google.com/web/tools/lighthouse/">Lighthouse</a> is a tool for rating the code for a PWA. The service worker seems only to be enabled in production, so the PWA score is low locally, but 91 once you deploy. The important one to watch locally is Performance. Since Preact is so light, your code is what makes the difference. We’re starting off with 3.7s to a meaningful paint.</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/cli-default-perf.jpg'>
<h2 id='adding-firebase'>Adding Firebase</h2>
<p>To get rolling with Firebase, I created a project “pwa-preact-firebase” (cause 30 character restriction) and grabbed the config info from “web setup” on the authentication page.</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/firebase-config.jpg'>
<p>If you haven’t used Firebase, it will seem scary that I posted a screenshot of that information, but it’s available in the UI. Firebase handles security via permissions and many tutorials start by changing them to being wide open to get started. I’m skipping that because I know I want authed users.</p>
<h3 id='config'>Config</h3>
<p>
I learned this organization technique from
<a href='https://twitter.com/stevekinney'>Steve Kinney</a>.
The gist is that you install and include Firebase (<a href="https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/be29e2abdec3020c1d3351eeebb5b2f4644d70ff">commit</a>), set the config, and then add named exports of the pieces that you want to use.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/e906d1cf35032992377f4da9dee4094a43b7d99c'>commit</a>
</p>
</div>
</div>
<pre><code class='language-js'>import firebase from 'firebase';&#x000A;&#x000A;const config = {&#x000A;  apiKey: 'AIzaSyBdk6HFp-9zT4oilTokoo4_e-ZX6uwR_Gg',&#x000A;  authDomain: 'pwa-preact-firebase.firebaseapp.com',&#x000A;  databaseURL: 'https://pwa-preact-firebase.firebaseio.com',&#x000A;  projectId: 'pwa-preact-firebase',&#x000A;  storageBucket: 'pwa-preact-firebase.appspot.com',&#x000A;  messagingSenderId: '263234041568'&#x000A;};&#x000A;firebase.initializeApp(config);&#x000A;&#x000A;export default firebase;&#x000A;&#x000A;export const database = firebase.database();&#x000A;export const auth = firebase.auth();&#x000A;export const googleAuthProvider = new firebase.auth.GoogleAuthProvider();&#x000A;</code></pre>
<div class='row'>
<div class='cell cell--s'>
<p>I’m only using Google Auth because it doesn’t require an API key and I’m always logged in on my phone. There are other options (Twitter, FB, email/password) as well.</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/auth-options.jpg'>
<p>With that configured, the methods in Firebase are available anywhere that you import them. The next part is the first decision as to where that is.</p>
<h2 id='questionable-organizational-decision'>Questionable Organizational Decision</h2>
<p>In my initial version, I put all of the code for the UI in the home folder (within routes) and kept firebase in the global components folder. This led to lengthy imports whenever I imported Firebase. I’m fixing that in this version by adding an ExercisesList component.</p>
<p>Since I knew that ExercisesList would have child components, I created a folder with an index, exported ExercisesList (with placeholder copy), and imported it into the home route. A bare minimum Preact component looks like this:</p>
</div>
</div>
<pre><code class='language-js'>import { h, Component } from 'preact';&#x000A;&#x000A;export default class ExercisesList extends Component {&#x000A;  render() {&#x000A;    return (&#x000A;      &lt;section&gt;&#x000A;        &lt;p&gt;ExercisesList&lt;/p&gt;&#x000A;      &lt;/section&gt;&#x000A;    );&#x000A;  }&#x000A;}&#x000A;</code></pre>
<div class='row'>
<div class='cell cell--s'>
<p>
And it’s imported like this (depending on its location)
<code class='code-inline'>import ExercisesList from '../../components/ExercisesList';</code>
</p>
<p>
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/9959c25db94cb7827acfc73e13f213c50e5dea82'>commit</a>
</p>
<h2 id='you-shall-not-get-data'>You Shall Not Get Data</h2>
<p>By default, no one can read or write to a Firebase database unless they are authed. One way of making sure that it’s installed and working is to use logic to toggle an auth UI or the content of a component.</p>
<p>
In ExercisesList, I imported auth and database from Firebase. At that point I only needed auth, but I knew that the reason that I was using auth was to access the database, so I brought them both in at the same time.
<code class='code-inline'>import { auth, database } from '../../firebase';</code>
</p>
<p>I needed auth available for the logic, but there a few steps to “toggle” them based on auth status.</p>
<h3 id='creating-child-components'>Creating Child Components</h3>
<p>It’s a personal preference, but my workflow when I’m going to need new components is to start by making them, adding placeholder copy, and then import them. So, I added an Exercises component and a SignIn component.</p>
<h3>A Simple SignIn</h3>
<p>
The only reason this app will exist is to track individual progress, so it’s intentionally useless if you’re not authed. To enable that, I imported
<code class='code-inline'>auth</code>
and
<code class='code-inline'>googleAuthProvider</code>.
</p>
</div>
</div>
<pre><code class='language-js'>import { h, Component } from 'preact';&#x000A;import { auth, googleAuthProvider } from '../firebase';&#x000A;&#x000A;export default class SignIn extends Component {&#x000A;  render() {&#x000A;    return (&#x000A;      &lt;section&gt;&#x000A;          &lt;h1&gt;Raisercise&lt;/h1&gt;&#x000A;          &lt;button onClick={() =&gt; auth.signInWithRedirect(googleAuthProvider)}&gt;&#x000A;            Sign In&#x000A;          &lt;/button&gt;&#x000A;      &lt;/section&gt;&#x000A;    );&#x000A;  }&#x000A;}&#x000A;</code></pre>
<div class='row'>
<div class='cell cell--s'>
<p>
For auth, this is where the magic happens:
<code class='code-inline'>onClick={() => auth.signInWithRedirect(googleAuthProvider)}</code>.
<code class='code-inline'>signInWithRedirect</code>
is one of a few auth methods from Firebase and I’m passing the Google option. That’s all it takes for the transaction to happen, which is pretty amazing to me.
</p>
<p>
I’m very visual, so my next step was importing the SignIn component to see it on the page. Because SignIn isn’t directly related to ExercisesList, I made it a sibling component. I don’t see a need to use it any other way yet, but it didn’t feel right nesting it in the folder structure. I am calling it from ExercisesList, though, replacing the placeholder copy.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/3d8b1b394baf61052b9e2ed870601e8df1d3c933'>commit</a>
</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/sign-in-button.jpg'>
<h3 id='mo-versions-mo-problems'>Mo Versions, Mo Problems</h3>
<p>
It seems that with the new version, the default URL locally is 0.0.0.0:8080 instead of localhost:8080 and 0.0.0.0 isn’t whitelisted for Firebase for OAuth. There were two options for fixing this: change the default host with a flag, like
<code class='code-inline'>preact watch --host localhost</code>
or changing it in Firebase’s admin. Since I’d have to type that about “fifty eleven” times or add an alias, I made the change in Firebase. (I also assumed it was changed for a good reason that I’m not aware of.)
</p>
<h3 id='removing-boilerplate'>Removing Boilerplate</h3>
<p>
The default header in the default Preact-CLI template (there are other options) is awesome for getting started, but there won’t be a header in this app until v2, if ever. So, I killed it.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/88a71fbb809d77e3e000eba71c64b3f6c732c49d'>commit</a>
</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/no-header.jpg'>
<p>The alignment and lack of style looked funky, and that was killing me, but I held strong on leaving CSS for later.</p>
<h3 id='a-snafu'>A Snafu</h3>
<p>
At this point, I realized ExercisesList wasn’t a great name for the primary container since it also contained SignIn. So, I swapped it for Exercises.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/12ca272fa08c366b9448b0060211f16032c586c2'>commit</a>
</p>
<h3 id='adding-an-exercises-list'>Adding an Exercises List for Reals</h3>
<p>
I kinda looked like
<a href='https://media3.giphy.com/media/VKtsOAHDx1Luo/giphy.gif'>Larry David</a>
as I tried to decide between Exercises List and Exercise List. This job would be great if it weren’t for naming. Ultimately, I wanted the relationship of the word list to be closer to the child Exercise than the parent. ¯\_(ツ)_/¯
</p>
<p>For that same reason, I nested ExerciseList in Exercises. I can imagine SignIn possibly being separated in the future, but not Exercises.</p>
<p>
Anyhow, I use a
<code class='code-inline'>pc</code>
snippet for a generic Preact component, which looks like this.
</p>
</div>
</div>
<pre><code class='language-js'>import { h, Component } from "preact";&#x000A;&#x000A;export default class  extends Component {&#x000A;  constructor () {&#x000A;    super()&#x000A;  }&#x000A;&#x000A;  render () {&#x000A;    return ()&#x000A;  }&#x000A;}&#x000A;</code></pre>
<div class='row'>
<div class='cell cell--s'>
<p>
I left the constructor cause I knew I’d need it later and added a placeholder list, simulating the map that I’ll need eventually. Importing that into Exercises made this feel like I was finally getting somewhere.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/7341165085cd6341b890e9cd8b122fe90c7e6f98'>commit</a>
</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/rendered-data.jpg'>
<h3 id='time-to-use-preact'>Time to Use Preact</h3>
<p>Up until this point, I had been putting HTML into JavaScript. To apply logic, though, I needed to use one of the features of Preact. Technically, state is a feature of React that Preact shrinks down, but I digress.</p>
<p>
The gist is that I want to show the SignIn component when there is no authed user and the ExerciseList when there is. To do this, I set a
<code class='code-inline'>currentUser</code>
to null by default, listen for Firebase auth changes, and render based on the value of
<code class='code-inline'>currentUser</code>
in state.
</p>
<h4 id='state-of-the-user'>The State of the User</h4>
<p>State is a concept that I don’t understand well enough to explain yet, but I’m no longer hung up on the OG front-end definition of it being a visual change to an element. Without a Shadow DOM framework, I would toggle a class on a parent element and use CSS to show the SignIn or ExerciseList HTML. Instead, I can assign values to keys in state to help Preact decide what to render (and when to re-render). We pay the price of learning a new system (and others building and maintaining new systems) to provide a better experience for users.</p>
<p>The best part is that it’s straight forward. Here’s how I added a null user to state in ExerciseList.</p>
</div>
</div>
<pre><code class='language-js'>import { h, Component } from 'preact';&#x000A;&#x000A;export default class extends Component {&#x000A;  constructor() {&#x000A;    super();&#x000A;&#x000A;    this.state = {&#x000A;        currentUser: null&#x000A;    };&#x000A;  }&#x000A;&#x000A;  render() {&#x000A;    return (&#x000A;      &lt;ul&gt;&#x000A;        &lt;li&gt;Exercise&lt;/li&gt;&#x000A;        &lt;li&gt;Exercise&lt;/li&gt;&#x000A;      &lt;/ul&gt;&#x000A;    );&#x000A;  }&#x000A;}&#x000A;</code></pre>
<div class='row'>
<div class='cell cell--s'>
<p>
Viewing that in the React Developer Tools confirmed that it worked and that I had messed up. When I refactored, I forgot to assign a name to the class in ExerciseList, so it was rendering a
<code class='code-inline'><_default></code>
component. Fixed that.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/ef267755b9ebaed6f5153d51f612aa7217bd8883'>commit</a>
</p>
<h4 id='adding-a-lifecycle-event'>Adding a LifeCycle Event</h4>
<p>
Another significant difference in Shadow DOM frameworks is lifecycle methods. They are another way of helping to decide what and when to render. In this case, I’m using
<code class='code-inline'>componentDidMount</code>
to listen for Firebase auth methods. I also had to bring in
<code class='code-inline'>auth</code>
from Firebase.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/d44ca9c668cc2ded666556b6a480ff067ec009ac'>commit</a>
</p>
<p>
At this point, clicking the Sign In button changes the state of
<code class='code-inline'>currentUser</code>
from
<code class='code-inline'>null</code>
to an object that Firebase returns for the current user.
</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/user-attributes.jpg'>
<h4 id='render-and-rerender'>Render and Re-render</h4>
<p>The final bit to make this work was some conditional logic in the Exercises component’s render function. For that to work, it needed to bring in state and assign it within the render function.</p>
</div>
</div>
<pre><code class='language-js'>import { h, Component } from 'preact';&#x000A;import { auth, database } from '../firebase';&#x000A;import ExerciseList from './ExerciseList';&#x000A;import SignIn from '../SignIn';&#x000A;&#x000A;export default class Exercises extends Component {&#x000A;  constructor() {&#x000A;    super();&#x000A;&#x000A;    this.state = {&#x000A;      currentUser: null&#x000A;    };&#x000A;  }&#x000A;&#x000A;  render() {&#x000A;    const currentUser = this.state;&#x000A;&#x000A;    return (&#x000A;      &lt;section&gt;&#x000A;        {!currentUser && &lt;SignIn /&gt;}&#x000A;        {currentUser && &lt;ExerciseList /&gt;}&#x000A;      &lt;/section&gt;&#x000A;    );&#x000A;  }&#x000A;}&#x000A;</code></pre>
<div class='row'>
<div class='cell cell--s'>
<p>With a user signed in, the UI is showing the ExerciseList component.</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/exercises-only.jpg'>
<p>
While that would eventually be enough to complete the actions that I’ll want, it seemed like adding an avatar and a sign out button was in order. So, I added a CurrentUser component with some placeholders to start.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/67b99cd73b8ebe575bde7e7ac9926665febac5d1'>commit</a>
</p>
<p>
Since this was an additional component within Exercises, I needed to wrap them in a single element (a JSX thing).
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/23227651e423f18e462b2776b4c2924409aaf35f'>commit</a>
</p>
<h4 id='passing-data-with-props'>Passing Data with Props</h4>
<p>
Since CurrentUser is a child of Exercises, it doesn’t have access to the
<code class='code-inline'>currentUser</code>
state. (I know the naming is getting confusing.) Rather than declare and update state within CurrentUser, I passed it in via props as
<code class='code-inline'>user</code>.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/9684a229780fbb424b9dc4d7cbccd471221df579'>commit</a>
</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/null-user.jpg'>
<p>
It was at this point that I realized I had messed up again. State had a value for currentUser, but it was passing
<code class='code-inline'>null</code>
to props. I can’t explain why, but I put the componentDidMount code in ExercisesList instead of Exercises. Fixing that made it so that the props was getting my user object.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/c5280a88a536f9801c5e4cb370e82eb48103c6d1'>commit</a>
</p>
<p>
I also had explicitly rebound the
<code class='code-inline'>currentUser</code>
constant in Exercises, which was adding a child object. I had done
<code class='code-inline'>const currentUser = this.state;</code>
instead of
<code class='code-inline'>const { currentUser } = this.state;</code>.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/f6d7c96b7343e1270eceee90a0628584a1a83544'>fixed</a>
</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/current-user.jpg'>
<h4 id='user-attributes-from-google-auth'>User Attributes from Google Auth</h4>
<p>
Now that I had access to the user object via Firebase, I could access the attributes. A
<code class='code-inline'>console.log</code>
revealed all of them, so I used the
<code class='code-inline'>photoURL</code>
and
<code class='code-inline'>displayName</code>
for the alt attribute. This is to give some basic feedback that I’m in the correct account when I auth.
</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/console-log-user.jpg'>
<p>
Preact passes props to the render functions, so I shortened up the attributes and added them to the image.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/ba9f3e2bee1f716f6ca597c7246049686e184fdd'>commit</a>
</p>
</div>
</div>
<pre><code class='language-js'>import { h, Component } from 'preact';&#x000A;&#x000A;export default class CurrentUser extends Component {&#x000A;  constructor() {&#x000A;    super();&#x000A;  }&#x000A;&#x000A;  render() {&#x000A;    const user = this.props.user;&#x000A;    return (&#x000A;      &lt;article&gt;&#x000A;        &lt;img alt={user.displayName} src={user.photoURL} width="40" /&gt;&#x000A;        &lt;button&gt;Sign Out&lt;/button&gt;&#x000A;      &lt;/article&gt;&#x000A;    );&#x000A;  }&#x000A;}&#x000A;</code></pre>
<div class='row'>
<div class='cell cell--s'>
<h4 id='adding-sign-out-functionality'>Adding Sign Out Functionality</h4>
<p>
Arguably, I’d never want to sign out aside from testing, but it feels awful to not have the option. Even more so when it’s 2 lines of code to make it happen. The CurrentUser component needed access to Firebase auth and then the
<code class='code-inline'>auth.signOut()</code>
method.
</p>
</div>
</div>
<pre><code class='language-js'>import { h, Component } from 'preact';&#x000A;import { auth } from '../firebase';&#x000A;&#x000A;export default class CurrentUser extends Component {&#x000A;  constructor() {&#x000A;    super();&#x000A;  }&#x000A;&#x000A;  render() {&#x000A;    const user = this.props.user;&#x000A;    return (&#x000A;      &lt;article&gt;&#x000A;        &lt;img alt={user.displayName} src={user.photoURL} width="40" /&gt;&#x000A;        &lt;button onClick={() =&gt; auth.signOut()}&gt;Sign Out&lt;/button&gt;&#x000A;      &lt;/article&gt;&#x000A;    );&#x000A;  }&#x000A;}&#x000A;</code></pre>
<div class='row'>
<div class='cell cell--s'>
<p>Whew. I now had a fully-functional Preact app with auth, all to see 2 lines of static HTML. It was time for the fun.</p>
<h2 id='planning-data'>Planning Data</h2>
<p>Knowing that Firebase stores data in JS objects, I imagined what the structure for the data would be in the planning portion of the project. I needed a series of exercises, which would have a name and a settingType. Those would have sessions with a setting and a flippable completed key. Each session would have an individual set with a timestamp and a completed key. I came up with:</p>
<pre><code class='language-markdown'>- exercises&#x000A;  - exercise&#x000A;    - name&#x000A;    - settingType&#x000A;    - sessions&#x000A;      - setting&#x000A;      - completed&#x000A;      - sets&#x000A;        - timestamp&#x000A;        - completed&#x000A;</code></pre>
<h3 id='no-plan-survives-contact-with-code'>No Plan Survives Contact with Code</h3>
<p>While that’s a misquote of a classic, it’s very true for me, and it was true for my plan for data. If you want a small test, peek at it and yell out what I’m missing. (It’s ok, the people around you will understand.)</p>
<p>The first thing that I realized that I missed was users. While I thought that I’d be the only user, even for testing there would need to be 2. With this structure, exercises would be read/written by everyone. So, the first step was changing to users first.</p>
<pre><code class='language-markdown'>- user&#x000A;  - exercises&#x000A;</code></pre>
<p>I also missed some attributes that I’d need and figured that creating sets after each completion round seemed like overkill. (That part was based on how I’d need to compare the recent data to determine when to raise the setting. Since I’d need to compare regardless, it was more work with no apparent benefit).</p>
<p>The timestamp is unnecessary for the basic functionality, but I knew that I’d want to graph these in a future version and wanted to be sure to have the data. I ended up with:</p>
<pre><code class='language-markdown'>- user&#x000A;  - exercise&#x000A;    - name&#x000A;    - setting&#x000A;    - settingType&#x000A;    - reps&#x000A;    - raiseAfter&#x000A;    - raiseBy&#x000A;    - sets&#x000A;      - set&#x000A;        - setting&#x000A;        - completed&#x000A;        - completedDate&#x000A;</code></pre>
</div>
</div>
<div class='row'>
<div class='cell cell--s'>
<p>One of the awesome features about Firebase is that you can create the data in their UI to test it out before needing to hook up a form. (Kinda how you’d mock up with local JSON).</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/firebase-db-ui.jpg'>
<p>I added 2 to make sure a loop works.</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/firebase-objects.jpg'>
<h2 id='getting-state-in-order'>Getting State In Order</h2>
<p>I learned the hard way to make sure that you get state configured correctly in your app before trying to render or create a form to add the data. In this app, data will be sent directly to Firebase. The data is then retrieved from Firebase and pushed into the local state.</p>
<h3 id='retrieving-data-from-firebase'>Retrieving Data from Firebase</h3>
<p>
Since I’m an authed user, Firebase will allow me to read and write to the database. Reading is done via a URL acting as an endpoint. In this case, it’s
<code class='code-inline'>https://pwa-preact-firebase.firebaseio.com/user01</code>.
</p>
<p>
I added
<code class='code-inline'>exercises: null</code>
to state so that it can be updated once the data is retrieved. Some of the URL is in the config, so I access it by piecing together bits with my UID. That doesn’t match the dummy data that I added, so I hard-coded
<code class='code-inline'>user01</code>
to test.
</p>
</div>
</div>
<pre><code class='language-js'>componentDidMount() {&#x000A;  auth.onAuthStateChanged(currentUser => {&#x000A;    this.setState({ currentUser });&#x000A;  });&#x000A;&#x000A;  const exercisesRef = database.ref('/' + 'user01' + '/exercises');&#x000A;&#x000A;  exercisesRef.on('value', snapshot => {&#x000A;    this.setState({ exercises: snapshot.val() });&#x000A;  });&#x000A;}&#x000A;</code></pre>
<div class='row'>
<div class='cell cell--s'>
<p>
Boom! Data coming from Firebase was now getting pushed directly into state, which would later determine what and when to render.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/765f2e221400d73ecabbd551d875289cf56c53a6'>commit</a>
</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/initial-state.jpg'>
<div class='stretch stretch--a mbm'>
<h4 id='a-learning-curveball'>A Learning Curveball</h4>
<p class='mbxs'>
Speaking of rendering, this was where everything fell apart for me. I didn’t know what I didn’t know, so I thought I needed to manually update state. I
<a href='https://stackoverflow.com/questions/44912152/how-to-push-child-arrays-into-items-in-an-array-to-local-react-state-via-a-fire/44912797#44912797'>asked on SO</a>
and had an expensive first try of
<a href='codementor.io'>Code Mentor</a>
without resolution. I was stuck for like three days straight, and it made me stop trying to make this a “build with me” video.
</p>
<p class='mbf'>The issue was that I was supposed to just push state and output from it, but I had been trying to build a nested local state. It was Steve Kinney’s explanation of how Firebase stores data (and why to use Lodash) that finally made it click.</p>
</div>
<h3 id='rendering-data-from-firebase'>Rendering Data from Firebase</h3>
<p>
Lodash’s map method works with nested objects like
<code class='code-inline'>.map()</code>
does for arrays. Installing and importing that was the first step to rendering data.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/802932a538e5a6b167c8e33e74f0b4991c106aa2'>commit</a>
</p>
<p>Since I wanted to loop over a user and their exercises, I needed both of those accessible within ExercisesList. I updated the render function in Exercises to include exercises and then assigned both as props.</p>
</div>
</div>
<pre><code class='language-js'>render() {&#x000A;  const { currentUser, exercises } = this.state;&#x000A;&#x000A;  return (&#x000A;    &lt;section&gt;&#x000A;      {!currentUser && &lt;SignIn /&gt;}&#x000A;      {currentUser &&&#x000A;        &lt;section&gt;&#x000A;            &lt;ExerciseList exercises={exercises} user={currentUser} /&gt;&#x000A;            &lt;CurrentUser user={currentUser} /&gt;&#x000A;        &lt;/section&gt;}&#x000A;    &lt;/section&gt;&#x000A;  );&#x000A;}&#x000A;</code></pre>
<div class='row'>
<div class='cell cell--s'>
<p>
To ensure this worked, I rendered a single attribute in ExercisesList.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/d202ed355e4c59bbbaca034eba82ccbf5a74b679'>commit</a>
</p>
</div>
</div>
<pre><code class='language-js'>render() {&#x000A;  const { user, exercises } = this.props;&#x000A;  return (&#x000A;    &lt;section&gt;&#x000A;      {map(exercises, (exercise, key) =&gt; &lt;article&gt;{exercise.name}&lt;/article&gt;)}&#x000A;    &lt;/section&gt;&#x000A;  );&#x000A;}&#x000A;</code></pre>
<div class='row'>
<div class='cell cell--s'>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/render-titles.jpg'>
<p>
I knew that I was going to be adding a lot (well some) more functionality, so I wanted to push the HTML for an individual Exercise into its own component. That required passing the user, the key, and all of the attributes of an exercise in via props. This spread operator
<code class='code-inline'>{...exercise}</code>
made that easy.
</p>
</div>
</div>
<pre><code class='language-js'>{map(exercises, (exercise, key) =&gt; (&#x000A;  &lt;Exercise key={key} {...exercise} user={user} /&gt;&#x000A;))}&#x000A;</code></pre>
<div class='row'>
<div class='cell cell--s'>
<p>
To render them I added each of the ones that I wanted as constants before calling them in the HTML.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/d1bf95980bf1059dd726fac2f9297b186e38017c'>commit</a>
</p>
</div>
</div>
<pre><code class='language-js'>render() {&#x000A;  const { name, setting, settingType } = this.props;&#x000A;  return (&#x000A;    &lt;article&gt;&#x000A;      &lt;h3&gt;&#x000A;        {name}&#x000A;      &lt;/h3&gt;&#x000A;      &lt;p&gt;&#x000A;        &lt;div&gt;{setting}&lt;/div&gt; {settingType}&#x000A;      &lt;/p&gt;&#x000A;      &lt;p&gt;&#x000A;        &lt;button setting={setting}&gt;&#x000A;          Fail&#x000A;        &lt;/button&gt;&#x000A;        &lt;button setting={setting}&gt;&#x000A;          Complete&#x000A;        &lt;/button&gt;&#x000A;      &lt;/p&gt;&#x000A;    &lt;/article&gt;&#x000A;  );&#x000A;}&#x000A;</code></pre>
<div class='row'>
<div class='cell cell--s'>
<p>At this point, the skeleton was in place. I knew auth was working and I could retrieve and render data from Firebase. It was time to start adding data from the app.</p>
<h2 id='connecting-a-form-to-firebase'>Connecting a Form to Firebase</h2>
<p>
The data (exercises) needed to be tied to an account and only able to be created by signed in users, so I added NewExercise and rendered it when there was a
<code class='code-inline'>currentUser</code>.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/8fda67a4af19b00d6a1e495b4afc5909724ce05a'>commit</a>
</p>
<p>To save this data, I needed to get all the values from the inputs, assign them to keys/values that match up with the data structure and send that structure to Firebase. It turned out that local state was great for handling the first part.</p>
<p>I like to get one small bit working and then replicate, so I got the exercise name saving to state first.</p>
</div>
</div>
<pre><code class='language-js'>import { h, Component } from 'preact';&#x000A;&#x000A;export default class NewExercise extends Component {&#x000A;  constructor() {&#x000A;    super();&#x000A;&#x000A;    this.state = {&#x000A;      name: ''&#x000A;    };&#x000A;&#x000A;    this.handleChange = this.handleChange.bind(this);&#x000A;  }&#x000A;&#x000A;  handleChange(e) {&#x000A;    this.setState({&#x000A;      [e.target.name]: e.target.value&#x000A;    });&#x000A;  }&#x000A;&#x000A;  render() {&#x000A;    const name = this.state;&#x000A;    return (&#x000A;      &lt;section&gt;&#x000A;        &lt;h2&gt;New Exercise&lt;/h2&gt;&#x000A;&#x000A;        &lt;form&gt;&#x000A;          &lt;div&gt;&#x000A;            &lt;label for="name"&gt;Name&lt;/label&gt;&#x000A;            &lt;input&#x000A;              type="text"&#x000A;              name="name"&#x000A;              onChange={this.handleChange}&#x000A;              placeholder="Chest Press"&#x000A;              value={this.state.name}&#x000A;            /&gt;&#x000A;          &lt;/div&gt;&#x000A;        &lt;/form&gt;&#x000A;      &lt;/section&gt;&#x000A;    );&#x000A;  }
}</code></pre>
<div class='row'>
<div class='cell cell--s'>
<p>
I had learned this technique from tutorials. A function is used as a listener (handleChange) for changes to an input. When it’s changed, local state is updated.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/68888063a715ac0d9f55fa4578e43bdfe6977321'>commit</a>
</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/dynamic-name.jpg'>
<p>
With that working, I added the rest of the data inputs. This meant adding each as empty to state by default, assign them to a variable from state, and creating an input to listen for events.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/7765fd1ee3ecfeb55d077ad1ba561019266f788d'>commit</a>
</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/state-attributes.jpg'>
<p>
My favorite little bit (and something I had recently learned) was chaining all of the items into one
<code class='code-inline'>const</code>.
</p>
</div>
</div>
<pre><code class='language-js'>const {&#x000A;  name,&#x000A;  setting,&#x000A;  settingType,&#x000A;  raiseAfter,&#x000A;  raiseBy,&#x000A;  reps&#x000A;} = this.state;&#x000A;</code></pre>
<div class='row'>
<div class='cell cell--s'>
<p>
With the data in state, I now could use that and Firebase’s
<code class='code-inline'>push</code>
method to handle the submission of the form. The impressive thing about
<code class='code-inline'>push</code>
is that it creates a unique identifier, so I don’t have to things like “exercise01”. To do this, I needed to import the database and allow NewExercise to have access to the current user’s UID.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/1433ebed3c85cdc379efb175e2a5e453a5f682d8'>commit</a>
</p>
<p>
This
<code class='code-inline'>handleSubmit</code>
function blocks the default behavior of the form and sends data to the URL specified, which is based on the UID of the current user.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/3531509bf6009ce12da25421d135b134ab7efdaf'>commit</a>
</p>
</div>
</div>
<pre><code class='language-js'>handleSubmit(e) {&#x000A;  e.preventDefault();&#x000A;  const exercisesRef = database.ref('/' + this.props.user.uid + '/exercises');&#x000A;  &#x000A;  exercisesRef.push({&#x000A;    name: this.state.name,&#x000A;    setting: this.state.setting,&#x000A;    settingType: this.state.settingType,&#x000A;    reps: this.state.reps,&#x000A;    raiseAfter: this.state.raiseAfter,&#x000A;    raiseBy: this.state.raiseBy&#x000A;  });&#x000A;}&#x000A;</code></pre>
<div class='row'>
<div class='cell cell--s'>
<p>After submitting the form, I could see that the core data structure was the same, with the added benefit of unique keys.</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/dynamic-ids.jpg'>
<h2 id='adding-to-existing-data-in-firebase'>Adding to Existing Data in Firebase</h2>
<p>Now that an exercise existed, I needed to hook up the inputs to add sets to it. Since the bulk of the data that I needed to interact with was in ExerciseList, it seemed best to add the functions there and pass them into Exercise.</p>
<p>Because I like to start small to make sure things are working properly, I started with failed exercises. These technically aren’t useful for anything in this version, but I know that I want to create sparklines of progress in the future, so I want to save the data behind the scenes for when I can’t complete a set. When that happens, I wanted to save the setting, the timestamp, and a boolean of false.</p>
<p>
I created a
<code class='code-inline'>handleFailed</code>
function with a slightly more complex URL to point to in Firebase. It looks up the user, then the setting of the current exercise, and pushes data to it. The function itself is passed into Exercise, which requires binding props in the constructor.
</p>
</div>
</div>
<pre><code class='language-js'>handleFailed(key) {&#x000A;  const currentUser = this.props.user;&#x000A;  const setting = this.props.exercises[key].setting;&#x000A;&#x000A;  database&#x000A;    .ref("/" + currentUser.uid)&#x000A;    .child("exercises")&#x000A;    .child(key)&#x000A;    .child("/sets")&#x000A;    .push({&#x000A;      completed: false,&#x000A;      completedDate: Date.now(),&#x000A;      setting: setting&#x000A;    });&#x000A;}&#x000A;</code></pre>
<div class='row'>
<div class='cell cell--s'>
<p>
The hard-coded
<code class='code-inline'>user01</code>
that I had used for ensuring the FB data worked earlier came back into play here, so I had to update it to use the current user as well:
<code class='code-inline'>const exercisesRef = database.ref( '/' + this.state.currentUser.uid + '/exercises' );</code>
</p>
<p>
Since I was looking for that UID too early, I had to move that within Firebase’s
<code class='code-inline'>onAuthStateChanged</code>
method.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/eaa4bf534cc47b70604f50ca3546df9a61bfa5b0'>commit</a>
</p>
<p>With that in place, clicking the Fail button adds data with a unique identifier to the current exercise.</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/fail-data.jpg'>
<h3 id='adding-data-conditionally'>Adding Data Conditionally</h3>
<p>Adding data for completions required some logic, and I don’t love the organization of this function, but it works. The gist is that before sending the data, the total number of completions needs to be compared to the number of completions to “raise after.” Once the number of completions is 1 less than the “raise after,” it needs to push the completion data and update the setting by the “raise by” amount.</p>
<p>First things first, I created some constants to make the comparisons more readable.</p>
</div>
</div>
<pre><code class='language-js'>const currentUser = this.props.user;&#x000A;const raiseAfter = this.props.exercises[key].raiseAfter;&#x000A;const raiseBy = this.props.exercises[key].raiseBy;&#x000A;const setting = this.props.exercises[key].setting;&#x000A;const completedCount = filter(this.props.exercises[key].sets, {&#x000A;  setting: setting,&#x000A;  completed: true&#x000A;}).length;&#x000A;</code></pre>
<div class='row'>
<div class='cell cell--s'>
<p>To get the completed count, I needed to filter the results using lodash. Then I used them to create the basic push (when completed is at least 2 less than the amount to raise by).</p>
</div>
</div>
<pre><code class='language-js'>if (completedCount < raiseAfter - 1) {&#x000A;  database&#x000A;    .ref("/" + currentUser.uid)&#x000A;    .child("exercises")&#x000A;    .child(key)&#x000A;    .child("/sets")&#x000A;    .push({&#x000A;      completed: true,&#x000A;      completedDate: Date.now(),&#x000A;      setting: setting&#x000A;    });&#x000A;}&#x000A;</code></pre>
<div class='row'>
<div class='cell cell--s'>
<p>Because I was dealing with integers and decimals for settings and JavaScript hates math with decimals, I needed to tack on some methods to check for a decimal number and output differently when there is one. Thank goodness for Stack Overflow!</p>
</div>
</div>
<pre><code class='language-js'>else {&#x000A;  const newSetting = function checkForDecimal() {&#x000A;    if (raiseBy.indexOf(".") === -1) {&#x000A;      return Number(setting) + Number(raiseBy);&#x000A;    } else {&#x000A;      return (Number(setting) + Number(raiseBy)).toFixed(1);&#x000A;    }&#x000A;  }&#x000A;}&#x000A;</code></pre>
<div class='row'>
<div class='cell cell--s'>
<p>When the number of completions is one less than the amount to complete before raising, completing one should add the completed data and raise the setting.</p>
</div>
</div>
<pre><code class='language-js'>database&#x000A;  .ref("/" + currentUser.uid)&#x000A;  .child("exercises")&#x000A;  .child(key)&#x000A;  .child("/sets")&#x000A;  .push({&#x000A;    completed: true,&#x000A;    completedDate: Date.now(),&#x000A;    setting: setting&#x000A;  });&#x000A;database&#x000A;  .ref("/" + currentUser.uid)&#x000A;  .child("exercises")&#x000A;  .child(key)&#x000A;  .update({ setting: newSetting });&#x000A;</code></pre>
<div class='row'>
<div class='cell cell--s'>
<p>
Similar to
<code class='code-inline'>handleFailed</code>,
I then needed to pass a function into Exercise and call it on the button in there.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/5f84e9564c3f4c665c6b33b22d075106da13c873'>commit</a>
</p>
<p>This part felt magical because it’s so fast. On clicking the “complete” button, it pushes the new setting. Because Preact is always listening for state changes, it grabs that new setting and renders it.</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/setting-update.gif'>
<p>
The final bit of functionality for this version was outputting an indicator that the data was updated. As a progress tracker, I wanted visual feedback of progress. To do this, I needed to use
<code class='code-inline'>filter</code>
to only output completed sets and
<code class='code-inline'>map</code>
to loop over the filtered results.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/31d0d1ecf4f6b648047c36cc0b53cc294865eea4'>commit</a>
</p>
</div>
</div>
<pre><code class='language-js'>import { h, Component } from 'preact';&#x000A;import { filter, map } from 'lodash';&#x000A;&#x000A;export default class Exercise extends Component {&#x000A;  constructor() {&#x000A;    super();&#x000A;  }&#x000A;&#x000A;  render() {&#x000A;    const {&#x000A;      name,&#x000A;      setting,&#x000A;      settingType,&#x000A;      sets,&#x000A;      handleCompleted,&#x000A;      handleFailed&#x000A;    } = this.props;&#x000A;    const filters = filter(sets, {&#x000A;      setting,&#x000A;      completed: true&#x000A;    });&#x000A;&#x000A;    return (&#x000A;      &lt;article&gt;&#x000A;        &lt;h3&gt;&#x000A;          {name}&#x000A;        &lt;/h3&gt;&#x000A;        &lt;p&gt;&#x000A;          &lt;div&gt;{setting}&lt;/div&gt; {settingType}&#x000A;        &lt;/p&gt;&#x000A;        &lt;p&gt;&#x000A;          &lt;button onClick={handleFailed} setting={setting}&gt;&#x000A;  Fail&#x000A;          &lt;/button&gt;&#x000A;          &lt;button onClick={handleCompleted} setting={setting}&gt;&#x000A;  Complete&#x000A;          &lt;/button&gt;&#x000A;        &lt;/p&gt;&#x000A;        &lt;ul&gt;&#x000A;          {sets && map(filters, (filter, key) =&gt; &lt;li key={key}&gt;{key}&lt;/li&gt;)}&#x000A;        &lt;/ul&gt;&#x000A;      &lt;/article&gt;&#x000A;    );&#x000A;  }&#x000A;}&#x000A;</code></pre>
<div class='row'>
<div class='cell cell--s'>
<p>To verify it was working without digging through Dev Tools, I rendered a list with the key, knowing that I’d make that more like “eye candy” with CSS.</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/render-keys.jpg'>
<h2 id='adding-global-styles'>Adding Global Styles</h2>
<p>
CSS in JS is new to me, and I don’t have a clear methodology yet. However, this was small enough that it doesn’t matter much. I made a
<code class='code-inline'>variables.scss</code>
for a few colors, and it felt like overkill for this, but something I would want to do for future projects.
</p>
</div>
</div>
<pre><code class='language-css'>$c-bg: #313743;&#x000A;$c-bg-light: #30353f;&#x000A;$c-negative: #a24335;&#x000A;$c-positive: #7b9058;&#x000A;$c-text: #ffffff;&#x000A;</code></pre>
<div class='row'>
<div class='cell cell--s'>
<p>
I then added a font from Google Fonts, reset font weights, and added default styles to inputs and buttons. I usually set a variable for spacing and use rems, but I stayed with pixels. Those styles got it headed in the right direction, and I wanted to try component-level styles for the rest.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/2a46dc62d08169bc8ae66ab03fab99df6626c09f'>commit</a>
</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/base-styles.jpg'>
<h2 id='adding-component-level-styles'>Adding Component-Level Styles</h2>
<h3 id='individual-exercise'>Individual Exercise</h3>
<p>
The individual exercise got the most work, and it felt a little weird to duplicate so many styles. I’m used to modifier classes, but it was also awesome to use basic names and have them get unique names automatically.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/2f19737e4022e7f92732007d4af92b9bbed18ff8'>commit</a>
</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/individual-exercise.jpg'>
<h3 id='new-exercise-form'>New Exercise Form</h3>
<p>
This form will have minimal use going forward, so I’ll likely tuck it away in a future version, but meanwhile, I wanted it to be a little more usable.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/2f19737e4022e7f92732007d4af92b9bbed18ff8'>commit</a>
</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/new-exercise-form.jpg'>
<h3 id='current-user'>Current User</h3>
<p>
This part is just for sanity’s sake, so I just gave it a touch of alignment.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/c411f534e2c8846f519ee4ee383914802b68c831'>commit</a>
</p>
<h3 id='home'>“Home”</h3>
<p>
The signed out experience needed some love, and I set a max-width in case I ever bring my laptop to the gym. (JK)
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/a17d2d6ac207f3fa74c361a4aa410c20d9fabda3'>commit</a>
</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/full-screen.jpg'>
<h3 id='cleaning-up-some-scss'>Cleaning Up Some SCSS</h3>
<p>
In my original version, I was designing in the browser, so the CSS was being written on the fly. In this, I went through and applied the variables just so that I know it can be done.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/2f5b98f393e39fc20022abd155d502192d7b4ca3'>commit</a>
</p>
<h2 id='save-to-home-assets'>Save to Home Assets</h2>
<p>
This web app will be saved on my phone, and there are some settings and icons that can be displayed that make it feel native. I didn’t put much time into it but made the colors match and put an icon of some weights. I have some ideas for v2 that will make this more fun.
<a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/f0b434e760a5d93555236296eebfb867b4b312b5'>commit</a>
</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/pixel.jpg'>
<h2 id='deploying-to-firebase'>Deploying to Firebase</h2>
<p>
Firebase is perfect for side projects like this. In addition to all of the other features, hosting via HTTPS is part of the
<a href='https://firebase.google.com/pricing/'>free plan</a>.
Their CLI makes it seamless, as well. Don't be like me and get so excited about it that you forget to build your app with Preact and deploy nothing, which is what I did just now.
</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/firebase-cli.jpg'>
<h2 id='build-first-then-deploy'>Ok, Build First, Then Deploy</h2>
<p>
After running a build with
<code class='code-inline'>preact build</code>
I saw that I had done something (probably the combo of Firebase and lodash) that added a lot of weight to my app. That will have to wait for later.
</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/build-warning.jpg'>
<h2 id='lighthouse-test'>Lighthouse Test</h2>
<p>The results of this test are why the CLI was valuable. I didn’t have to do any of the service worker and manifest setup, so I have a smooth 100. If you haven’t done that stuff before, you should try it manually, though.</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/pwa-score.jpg'>
<p>The performance dropped over 10 points from the default, and I’ll have to figure out what is causing that. It won’t matter to me for this app, but I want to learn how to troubleshoot it. My gut says it’s a combo of the font request, the Firebase data request, and lodash.</p>
<img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/perf-score.jpg'>
<h2 id='make-it-better'>Make It Better</h2>
<p>At this point, it is usable, but not an experience I'd ship to others. When you auth, there is some downtime as it transitions, which feels janky. Once it’s loaded, it’s good, though. Goals for v2 improvements:</p>
<ul class='list'>
<li class='mbf'>Fix the console errors when you are signed out</li>
<li class='mbf'>Over 80 in Lighthouse perf score</li>
<li class='mbf'>Loading animation with a smooth transition from sign in and on load</li>
<li>Visual indicator for failures (they save with no feedback)</li>
</ul>
<p>I also want to add some reporting because I’m all about that data, that data. It’d be overkill to do full graphs, but I want some sparklines that show when I struggle to advance a setting and counts of the total number of exercises done.</p>
<h2 id='thank-you'>Thank You</h2>
<p>If you made it this far, wow, thank you. When you’ve had a nice long rest, I’d love to know that you thought.</p>
</div>
</div>

<section class='row'>
<div class='cell cell--s'>
<div id="disqus_thread" class="well">
<script type="text/javascript">
var disqus_shortname = 'dandenney';
(function() {
var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
</div>
</div>
</section>

<footer>
<p class='dib'>
Dan Denney
</p>
<nav class='dib'>
<a class="mls" href="/posts">Posts</a>
<a class="mls" href="/blips">Blips</a>
<a class="mls" href="/tinkerings">Tinkerings</a>
<a class="mls" href="/">Home</a>
</nav>
</footer>

<!-- = javascript_include_tag  'vendor' -->
<!-- = javascript_include_tag  'application' -->
<!-- = javascript_include_tag  'vendor' -->
<script src="../../assets/javascripts/vendor/prism.js"></script>
<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
ga('create', 'UA-3589831-2', 'auto');
ga('send', 'pageview');
</script>

</body>
</html>
