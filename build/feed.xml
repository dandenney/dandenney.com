<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/posts</id>
  <link href="http://blog.url.com/posts"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2017-08-31T20:00:00-04:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>A New Adventure</title>
    <link rel="alternate" href="http://blog.url.com/posts/general/a-new-adventure"/>
    <id>http://blog.url.com/posts/general/a-new-adventure</id>
    <published>2017-08-31T20:00:00-04:00</published>
    <updated>2017-09-09T12:48:18-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;style&gt;
  /* line 1, (__TEMPLATE__) */
  #particles-js {
    position: fixed;
    width: 100%;
    height: calc(100% + 91px);
    background-color: #2c9cc0;
    background-image: url("");
    background-repeat: no-repeat;
    background-size: cover;
    background-position: 50% 50%;
    top: -91px; }
  
  /* line 11, (__TEMPLATE__) */
  section {
    position: relative;
    z-index: 1; }
  
  /* line 14, (__TEMPLATE__) */
  article {
    background: #ffffff;
    padding: 20px; }
  
  /* line 17, (__TEMPLATE__) */
  #disqus_thread {
    background: #ffffff;
    padding: 20px; }
  
  /* line 20, (__TEMPLATE__) */
  header {
    position: relative;
    z-index: 1; }
&lt;/style&gt;
&lt;div id='particles-js'&gt;&lt;/div&gt;
&lt;section class='row nudge post-wrap ptl'&gt;
&lt;div class='cell'&gt;
&lt;article&gt;
&lt;div class='cell cell--s'&gt;
&lt;h1 class='mtm'&gt;A New Adventure&lt;/h1&gt;
&lt;p&gt;
Backstory: After leaving my job at the end of June, I started with a little vacation time, in California and upstate New York for family weddings. Since then, I've had the benefit of working with the awesome folks at &lt;a href='http://www.bridgeandbloom.com/'&gt;Bridge + Bloom&lt;/a&gt; on a project. If you're a freelance developer, I can't recommend them enough. They do fantastic design work, they're fun people, and they're highly organized.
&lt;/p&gt;
&lt;h2&gt;And now...&lt;/h2&gt;
&lt;p&gt;
I've joined the team at &lt;a href='https://www.datacamp.com/'&gt;DataCamp&lt;/a&gt;! As you're reading this, I'm in Belgium starting two weeks of working with the engineering team in their Leuven office. I'm pretty excited, for lots of reasons.
&lt;/p&gt;
&lt;p&gt;
As a "Lead Front End Web Developer," I get to stay focused on the part of the web that I love the most while working in very familiar systems. Because they're also in the online education space, there are a lot of crossovers, and the focus on data science is exciting. A handful of my side projects in the past couple of years have been around data tracking and visualization, so it's a field that I'm intrigued by. I'm eager to learn more about how people are using DataCamp in their work.
&lt;/p&gt;
&lt;p&gt;
They align perfectly with the things that are important to me: working with good people towards a goal, building things for the web that benefit people, and sharing knowledge. Throughout the interview process, everyone was so kind and communicated so well. I'm looking forward to getting to know everyone.
&lt;/p&gt;
&lt;p&gt;
Did I mention they have an office in Belgium? If you didn't know, Belgium is the home of humanity's greatest invention: Delerium Tremens. I'll certainly be celebrating this first day with a glass of that. After onboarding, I'll still be remote, but I am looking forward to many opportunities to spend time with the team here, in NYC, and on our two retreats per year.
&lt;/p&gt;
&lt;h2&gt;So, everything is Rainbows and Sunshine?&lt;/h2&gt;
&lt;p&gt;
No way! Working with a new group of people on new projects is always intimidating. I have at least my fair share of Imposter Syndrome and who knows, maybe this is when I get found out.
&lt;/p&gt;
&lt;p&gt;
What I do know is that this team wants me to succeed and they're going to get my best. I also know that I have this wonderful community that shares information about their work, helping to lift me up. Finally, I have plenty of friends that I can reach out to who will share their experiences with challenges that I find. If you're reading this from my tweet, you're one of them. Thank you to all of you who reached out, too!
&lt;/p&gt;
&lt;p&gt;
I'd like to give an extra thank you to Christopher Schmitt for having me &lt;a href='https://goodstuff.fm/nbsp/127'&gt;on Non-Breaking Space&lt;/a&gt; to chat. That convo helped reinforce how much I enjoyed the visual portions of front-end development.
&lt;/p&gt;
&lt;h2&gt;What I've Learned Recently&lt;/h2&gt;
&lt;p&gt;
In this downtime, I've learned a lot. I spent some time learning Preact, dove further into React, built two things with Craft CMS, and soft-launched a side project. Most importantly, though, I learned that if you continue to work hard, be kind, and share your knowledge, the right people notice. Results may vary, but I can't recommend that workflow enough.
&lt;/p&gt;
&lt;/div&gt;
&lt;/article&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;script src="assets/javascripts/posts/a-new-adventure/particles.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
  particlesJS("particles-js", {
    "particles": {
      "number": {
        "value": 80,
        "density": {
          "enable": true,
          "value_area": 800
        }
      },
      "color": {
        "value": "#ffffff"
      },
      "shape": {
        "type": "circle",
        "stroke": {
          "width": 0,
          "color": "#000000"
        },
        "polygon": {
          "nb_sides": 5
        },
        "image": {
          "src": "img/github.svg",
          "width": 100,
          "height": 100
        }
      },
      "opacity": {
        "value": 0.5,
        "random": false,
        "anim": {
          "enable": false,
          "speed": 1,
          "opacity_min": 0.1,
          "sync": false
        }
      },
      "size": {
        "value": 3,
        "random": true,
        "anim": {
          "enable": false,
          "speed": 40,
          "size_min": 0.1,
          "sync": false
        }
      },
      "line_linked": {
        "enable": true,
        "distance": 150,
        "color": "#ffffff",
        "opacity": 0.4,
        "width": 1
      },
      "move": {
        "enable": true,
        "speed": 0.5,
        "direction": "none",
        "random": false,
        "straight": false,
        "out_mode": "out",
        "bounce": false,
        "attract": {
          "enable": false,
          "rotateX": 600,
          "rotateY": 1200
        }
      }
    },
    "interactivity": {
      "detect_on": "canvas",
      "events": {
        "onhover": {
          "enable": true,
          "mode": "repulse"
        },
        "onclick": {
          "enable": true,
          "mode": "push"
        },
        "resize": true
      },
      "modes": {
        "grab": {
          "distance": 400,
          "line_linked": {
            "opacity": 1
          }
        },
        "bubble": {
          "distance": 400,
          "size": 40,
          "duration": 2,
          "opacity": 8,
          "speed": 3
        },
        "repulse": {
          "distance": 200,
          "duration": 0.4
        },
        "push": {
          "particles_nb": 4
        },
        "remove": {
          "particles_nb": 2
        }
      }
    },
    "retina_detect": true
  });
&lt;/script&gt;
</content>
  </entry>
  <entry>
    <title>Building a Small PWA with Preact and Firebase</title>
    <link rel="alternate" href="http://blog.url.com/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase"/>
    <id>http://blog.url.com/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase</id>
    <published>2017-07-22T20:00:00-04:00</published>
    <updated>2017-07-24T13:49:31-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;style&gt;
  /* line 1, (__TEMPLATE__) */
  h1 {
    margin-top: 0.5em; }
    @media screen and (min-width: 840px) {
      /* line 1, (__TEMPLATE__) */
      h1 {
        font-size: 250%;
        line-height: 1.2; } }
  
  /* line 7, (__TEMPLATE__) */
  .list {
    padding-left: 1.75em; }
    /* line 10, (__TEMPLATE__) */
    .list &gt; li {
      list-style: disc; }
  
  /* line 13, (__TEMPLATE__) */
  .stretch {
    border: 10px solid #ffffff;
    box-sizing: border-box;
    position: relative; }
    @media screen and (min-width: 840px) {
      /* line 13, (__TEMPLATE__) */
      .stretch {
        left: -50px;
        max-width: 800px;
        width: 800px; } }
  
  /* line 23, (__TEMPLATE__) */
  .stretch--a {
    border: 2px solid #f5f5f5;
    padding: 1em; }
  
  /* line 27, (__TEMPLATE__) */
  .stretch--b {
    border: 0;
    box-shadow: none; }
  
  /* line 31, (__TEMPLATE__) */
  .commit {
    background: #f5f5f5;
    cursor: pointer;
    display: block;
    font-size: 16px;
    margin-top: 0.5em;
    padding: 0 16px;
    width: 3em; }
  
  /* line 40, (__TEMPLATE__) */
  .code-inline {
    background: #f5f5f5;
    color: #535353;
    display: inline-block;
    font-size: 75%;
    padding: 0 0.5em; }
  
  /* line 47, (__TEMPLATE__) */
  strong {
    font-weight: 600; }
  
  /* line 50, (__TEMPLATE__) */
  pre {
    font-size: 16px; }
  
  /* line 53, (__TEMPLATE__) */
  pre[class*="language-"] {
    border-radius: 0;
    margin-bottom: 2em; }
    @media screen and (min-width: 840px) {
      /* line 53, (__TEMPLATE__) */
      pre[class*="language-"] {
        padding: 4em; } }
  
  /* line 60, (__TEMPLATE__) */
  .quick-links {
    align-items: center;
    border: 1px solid #f5f5f5;
    display: flex;
    justify-content: space-between; }
    /* line 66, (__TEMPLATE__) */
    .quick-links a {
      padding: 0.5em 1em;
      text-align: center;
      width: 50%; }
      /* line 71, (__TEMPLATE__) */
      .quick-links a + a {
        border-left: 1px solid #f5f5f5; }
  
  /* line 74, (__TEMPLATE__) */
  .toc {
    background: #fff;
    border: 1px solid #f5f5f5;
    padding: 1em; }
    /* line 79, (__TEMPLATE__) */
    .toc ol {
      margin: 0;
      padding: 0; }
    /* line 83, (__TEMPLATE__) */
    .toc li {
      margin: 0 0 0.5em 0;
      padding: 0; }
    @media screen and (min-width: 1260px) {
      /* line 74, (__TEMPLATE__) */
      .toc {
        font-size: 67%;
        padding: 0.5em;
        position: fixed;
        right: 0.5em;
        top: 7em;
        z-index: 1; } }
  
  /* line 95, (__TEMPLATE__) */
  .temp-toc {
    margin: 0 0 1em 0;
    padding: 0; }
    /* line 98, (__TEMPLATE__) */
    .temp-toc li {
      margin: 0 0 0.5em 0;
      padding: 0; }
&lt;/style&gt;
&lt;div class='row'&gt;
&lt;div class='cell cell--s'&gt;
&lt;h1 class='mbf'&gt;Building a Small PWA with Preact and Firebase&lt;/h1&gt;
&lt;small class='db mbs'&gt;Read time: 29:33&lt;/small&gt;
&lt;div class='quick-links'&gt;
&lt;a href='https://pwa-preact-firebase.firebaseapp.com/'&gt;Live Version&lt;/a&gt;
&lt;a href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase'&gt;GitHub Repo&lt;/a&gt;
&lt;/div&gt;
&lt;p class='h4 mbxs mtm' id='intro'&gt;Disclaimer: This is not a tutorial!&lt;/p&gt;
&lt;p&gt;
I have a ton of respect for the hard work that goes into using a project to teach the fundamentals of a technology. This isn't that, it's me sharing a process of learning by building something of my own.
&lt;/p&gt;
&lt;p&gt;
If you’re looking for related tutorials, I learned from
&lt;a href='https://reactforbeginners.com'&gt;React for Beginners&lt;/a&gt;,
&lt;a href='https://egghead.io/courses/up-and-running-with-preact'&gt;Up and running with Preact&lt;/a&gt;,
&lt;a href='https://frontendmasters.com/courses/firebase-react'&gt;Firebase + React: Real-time, Serverless Web Apps&lt;/a&gt;,
and
&lt;a href='https://css-tricks.com/intro-firebase-react'&gt;Intro to Firebase and React&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
In this post, I’m sharing how I did something, and it is currently at the “&lt;a href='http://wiki.c2.com/?MakeItWorkMakeItRightMakeItFast'&gt;make it work&lt;/a&gt;” level. I’m 100% open to feedback on how to improve it, and I’ve taken extra steps in the process to make giving feedback easy. This doesn't just help me, but also anyone who reads this in the future. If you know of a way to make it better, please leave a comment on the post or a commit,
&lt;a href='https://twitter.com/dandenney'&gt;@ me&lt;/a&gt;,
&lt;a href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase'&gt;create a PR&lt;/a&gt;,
or write up a reaction post.
&lt;/p&gt;
&lt;h2&gt;Sections&lt;/h2&gt;
&lt;ol class='temp-toc'&gt;
&lt;li&gt;
&lt;a href='#intro'&gt;Intro (1:45)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='#getting-started'&gt;Getting Started (1:40)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='#adding-firebase'&gt;Adding Firebase for Auth (3:45)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='#removing-boilerplate'&gt;Preact Auth and Organization (5:23)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='#planning-data'&gt;Retrieving Data from Firebase (4:25)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='#connecting-a-form-to-firebase'&gt;Saving Data to Firebase (5:44)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='#adding-global-styles'&gt;Styling (1:45)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href='#deploying-to-firebase'&gt;Wrapping Up (1:44)&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id='post-goals'&gt;Post Goals&lt;/h2&gt;
&lt;p&gt;The goals for this post are to share what I’ve learned, try out some new features (for me) in a blog post. It seems like a long post sharing open-source code could benefit from a Table of Contents, read time indicators, and commit links (41 of em).&lt;/p&gt;
&lt;h2 id='project-goals'&gt;Project Goals&lt;/h2&gt;
&lt;p&gt;The goals of this project were: reading/writing/manipulating data, designing a mobile UI and learning Preact. Preact is overkill for the base functionality, but the CLI version has features that are very beneficial.&lt;/p&gt;
&lt;h2 id='app-goals'&gt;App Goals&lt;/h2&gt;
&lt;p&gt;
I exercise because I greatly enjoy beer and food. I'm not that into it, but since I'm going to do it, I should follow a system created by people who are. I'm simplifying, but a handful of the systems tell you to set an initial weight, do a specific number of reps, and then raise the weight after 5 sessions of reps. (Some useful apps exist, like &lt;a href="https://stronglifts.com"&gt;Strong Lifts&lt;/a&gt;, but I wanted a customized version.) Most importantly, I wanted a dead simple UI that makes it clear what weight or speed I need to set when I get to the machine.
&lt;/p&gt;
&lt;h2 id='getting-started'&gt;Getting Started With a Project&lt;/h2&gt;
&lt;p&gt;
Since this was an app being designed for a demographic of 1 person, research was limited. I knew what was missing for me in other apps, and the style that I wanted. I use
&lt;a href='http://www.bear-writer.com'&gt;Bear&lt;/a&gt;
for project details, and this had requirements, inspiration images, and my best guess at the data structure.
&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/notes.jpg'&gt;
&lt;p&gt;
To allow for continually working on my version, I’m sharing the steps as I recreate the app in a
&lt;a href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase'&gt;repo&lt;/a&gt;
specifically for this post.
&lt;/p&gt;
&lt;h2 id='preact-cli'&gt;Initializing a Project with Preact CLI&lt;/h2&gt;
&lt;p&gt;
I was inspired by
&lt;a href='https://www.youtube.com/watch?v=aCMbSyngXB4'&gt;Addy Osmani’s talk on Production PWAs with JS frameworks&lt;/a&gt;,
in which he shares how the various CLIs added PWA support by default. Automated service worker setup alone makes this tool fantastic, but the
&lt;a href='https://github.com/developit/preact-cli'&gt;feature list&lt;/a&gt;
is insane for 4.5kb.
&lt;/p&gt;
&lt;p&gt;
My first step is always creating a repo via GitHub’s UI. It’s a personal preference, but it adds a step when you’re using a generator. That’s still preferable to me vs. initializing from the command line after generating.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/b3692cb0267ed7f1a1075ded896f58a5be39aa1f'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;img class='mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/github-repo.jpg'&gt;
&lt;p&gt;
Sass support requires a flag, so after installing the CLI, I ran
&lt;code class='code-inline'&gt;preact create app --sass&lt;/code&gt;
and then dragged the files out to my main folder.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/ba21e66db288a85e0ad8910f0e312b4347b7b937'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;div class='stretch stretch--a mbm'&gt;
&lt;h4 class='mtf'&gt;A &lt;strike&gt;known&lt;/strike&gt; fixed issue&lt;/h4&gt;
&lt;p class='mbf'&gt;
In my first build, the 1.3 version would enable Sass support but still generate
&lt;code class='code-inline'&gt;.less&lt;/code&gt;
files. In getting the link to the issue, I found that it was
&lt;a href='https://github.com/developit/preact-cli/issues/32'&gt;closed and fixed&lt;/a&gt;
with 1.4, so I updated and regenerated.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/89b5c0fc507980aa66fda4805c1da269d33f959a'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id='its-alive'&gt;It’s alive!&lt;/h2&gt;
&lt;p&gt;
Running
&lt;code class='code-inline'&gt;preact watch&lt;/code&gt;
(or the command of your choice) fires up a server on
&lt;code class='code-inline'&gt;0.0.0.0:8080&lt;/code&gt;
and the starter app is visible.
&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/preact-cli-home.jpg'&gt;
&lt;p&gt;The out-of-the-box Lighthouse scores are fantastic. (&lt;a href="https://developers.google.com/web/tools/lighthouse/"&gt;Lighthouse&lt;/a&gt; is a tool for rating the code for a PWA. The service worker seems only to be enabled in production, so the PWA score is low locally, but 91 once you deploy. The important one to watch locally is Performance. Since Preact is so light, your code is what makes the difference. We’re starting off with 3.7s to a meaningful paint.&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/cli-default-perf.jpg'&gt;
&lt;h2 id='adding-firebase'&gt;Adding Firebase&lt;/h2&gt;
&lt;p&gt;To get rolling with Firebase, I created a project “pwa-preact-firebase” (cause 30 character restriction) and grabbed the config info from “web setup” on the authentication page.&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/firebase-config.jpg'&gt;
&lt;p&gt;If you haven’t used Firebase, it will seem scary that I posted a screenshot of that information, but it’s available in the UI. Firebase handles security via permissions and many tutorials start by changing them to being wide open to get started. I’m skipping that because I know I want authed users.&lt;/p&gt;
&lt;h3 id='config'&gt;Config&lt;/h3&gt;
&lt;p&gt;
I learned this organization technique from
&lt;a href='https://twitter.com/stevekinney'&gt;Steve Kinney&lt;/a&gt;.
The gist is that you install and include Firebase (&lt;a href="https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/be29e2abdec3020c1d3351eeebb5b2f4644d70ff"&gt;commit&lt;/a&gt;), set the config, and then add named exports of the pieces that you want to use.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/e906d1cf35032992377f4da9dee4094a43b7d99c'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class='language-js'&gt;import firebase from 'firebase';&amp;#x000A;&amp;#x000A;const config = {&amp;#x000A;  apiKey: 'AIzaSyBdk6HFp-9zT4oilTokoo4_e-ZX6uwR_Gg',&amp;#x000A;  authDomain: 'pwa-preact-firebase.firebaseapp.com',&amp;#x000A;  databaseURL: 'https://pwa-preact-firebase.firebaseio.com',&amp;#x000A;  projectId: 'pwa-preact-firebase',&amp;#x000A;  storageBucket: 'pwa-preact-firebase.appspot.com',&amp;#x000A;  messagingSenderId: '263234041568'&amp;#x000A;};&amp;#x000A;firebase.initializeApp(config);&amp;#x000A;&amp;#x000A;export default firebase;&amp;#x000A;&amp;#x000A;export const database = firebase.database();&amp;#x000A;export const auth = firebase.auth();&amp;#x000A;export const googleAuthProvider = new firebase.auth.GoogleAuthProvider();&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;div class='row'&gt;
&lt;div class='cell cell--s'&gt;
&lt;p&gt;I’m only using Google Auth because it doesn’t require an API key and I’m always logged in on my phone. There are other options (Twitter, FB, email/password) as well.&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/auth-options.jpg'&gt;
&lt;p&gt;With that configured, the methods in Firebase are available anywhere that you import them. The next part is the first decision as to where that is.&lt;/p&gt;
&lt;h2 id='questionable-organizational-decision'&gt;Questionable Organizational Decision&lt;/h2&gt;
&lt;p&gt;In my initial version, I put all of the code for the UI in the home folder (within routes) and kept firebase in the global components folder. This led to lengthy imports whenever I imported Firebase. I’m fixing that in this version by adding an ExercisesList component.&lt;/p&gt;
&lt;p&gt;Since I knew that ExercisesList would have child components, I created a folder with an index, exported ExercisesList (with placeholder copy), and imported it into the home route. A bare minimum Preact component looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class='language-js'&gt;import { h, Component } from 'preact';&amp;#x000A;&amp;#x000A;export default class ExercisesList extends Component {&amp;#x000A;  render() {&amp;#x000A;    return (&amp;#x000A;      &amp;lt;section&amp;gt;&amp;#x000A;        &amp;lt;p&amp;gt;ExercisesList&amp;lt;/p&amp;gt;&amp;#x000A;      &amp;lt;/section&amp;gt;&amp;#x000A;    );&amp;#x000A;  }&amp;#x000A;}&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;div class='row'&gt;
&lt;div class='cell cell--s'&gt;
&lt;p&gt;
And it’s imported like this (depending on its location)
&lt;code class='code-inline'&gt;import ExercisesList from '../../components/ExercisesList';&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/9959c25db94cb7827acfc73e13f213c50e5dea82'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;h2 id='you-shall-not-get-data'&gt;You Shall Not Get Data&lt;/h2&gt;
&lt;p&gt;By default, no one can read or write to a Firebase database unless they are authed. One way of making sure that it’s installed and working is to use logic to toggle an auth UI or the content of a component.&lt;/p&gt;
&lt;p&gt;
In ExercisesList, I imported auth and database from Firebase. At that point I only needed auth, but I knew that the reason that I was using auth was to access the database, so I brought them both in at the same time.
&lt;code class='code-inline'&gt;import { auth, database } from '../../firebase';&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;I needed auth available for the logic, but there a few steps to “toggle” them based on auth status.&lt;/p&gt;
&lt;h3 id='creating-child-components'&gt;Creating Child Components&lt;/h3&gt;
&lt;p&gt;It’s a personal preference, but my workflow when I’m going to need new components is to start by making them, adding placeholder copy, and then import them. So, I added an Exercises component and a SignIn component.&lt;/p&gt;
&lt;h3&gt;A Simple SignIn&lt;/h3&gt;
&lt;p&gt;
The only reason this app will exist is to track individual progress, so it’s intentionally useless if you’re not authed. To enable that, I imported
&lt;code class='code-inline'&gt;auth&lt;/code&gt;
and
&lt;code class='code-inline'&gt;googleAuthProvider&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class='language-js'&gt;import { h, Component } from 'preact';&amp;#x000A;import { auth, googleAuthProvider } from '../firebase';&amp;#x000A;&amp;#x000A;export default class SignIn extends Component {&amp;#x000A;  render() {&amp;#x000A;    return (&amp;#x000A;      &amp;lt;section&amp;gt;&amp;#x000A;          &amp;lt;h1&amp;gt;Raisercise&amp;lt;/h1&amp;gt;&amp;#x000A;          &amp;lt;button onClick={() =&amp;gt; auth.signInWithRedirect(googleAuthProvider)}&amp;gt;&amp;#x000A;            Sign In&amp;#x000A;          &amp;lt;/button&amp;gt;&amp;#x000A;      &amp;lt;/section&amp;gt;&amp;#x000A;    );&amp;#x000A;  }&amp;#x000A;}&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;div class='row'&gt;
&lt;div class='cell cell--s'&gt;
&lt;p&gt;
For auth, this is where the magic happens:
&lt;code class='code-inline'&gt;onClick={() =&gt; auth.signInWithRedirect(googleAuthProvider)}&lt;/code&gt;.
&lt;code class='code-inline'&gt;signInWithRedirect&lt;/code&gt;
is one of a few auth methods from Firebase and I’m passing the Google option. That’s all it takes for the transaction to happen, which is pretty amazing to me.
&lt;/p&gt;
&lt;p&gt;
I’m very visual, so my next step was importing the SignIn component to see it on the page. Because SignIn isn’t directly related to ExercisesList, I made it a sibling component. I don’t see a need to use it any other way yet, but it didn’t feel right nesting it in the folder structure. I am calling it from ExercisesList, though, replacing the placeholder copy.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/3d8b1b394baf61052b9e2ed870601e8df1d3c933'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/sign-in-button.jpg'&gt;
&lt;h3 id='mo-versions-mo-problems'&gt;Mo Versions, Mo Problems&lt;/h3&gt;
&lt;p&gt;
It seems that with the new version, the default URL locally is 0.0.0.0:8080 instead of localhost:8080 and 0.0.0.0 isn’t whitelisted for Firebase for OAuth. There were two options for fixing this: change the default host with a flag, like
&lt;code class='code-inline'&gt;preact watch --host localhost&lt;/code&gt;
or changing it in Firebase’s admin. Since I’d have to type that about “fifty eleven” times or add an alias, I made the change in Firebase. (I also assumed it was changed for a good reason that I’m not aware of.)
&lt;/p&gt;
&lt;h3 id='removing-boilerplate'&gt;Removing Boilerplate&lt;/h3&gt;
&lt;p&gt;
The default header in the default Preact-CLI template (there are other options) is awesome for getting started, but there won’t be a header in this app until v2, if ever. So, I killed it.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/88a71fbb809d77e3e000eba71c64b3f6c732c49d'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/no-header.jpg'&gt;
&lt;p&gt;The alignment and lack of style looked funky, and that was killing me, but I held strong on leaving CSS for later.&lt;/p&gt;
&lt;h3 id='a-snafu'&gt;A Snafu&lt;/h3&gt;
&lt;p&gt;
At this point, I realized ExercisesList wasn’t a great name for the primary container since it also contained SignIn. So, I swapped it for Exercises.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/12ca272fa08c366b9448b0060211f16032c586c2'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;h3 id='adding-an-exercises-list'&gt;Adding an Exercises List for Reals&lt;/h3&gt;
&lt;p&gt;
I kinda looked like
&lt;a href='https://media3.giphy.com/media/VKtsOAHDx1Luo/giphy.gif'&gt;Larry David&lt;/a&gt;
as I tried to decide between Exercises List and Exercise List. This job would be great if it weren’t for naming. Ultimately, I wanted the relationship of the word list to be closer to the child Exercise than the parent. ¯\_(ツ)_/¯
&lt;/p&gt;
&lt;p&gt;For that same reason, I nested ExerciseList in Exercises. I can imagine SignIn possibly being separated in the future, but not Exercises.&lt;/p&gt;
&lt;p&gt;
Anyhow, I use a
&lt;code class='code-inline'&gt;pc&lt;/code&gt;
snippet for a generic Preact component, which looks like this.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class='language-js'&gt;import { h, Component } from "preact";&amp;#x000A;&amp;#x000A;export default class  extends Component {&amp;#x000A;  constructor () {&amp;#x000A;    super()&amp;#x000A;  }&amp;#x000A;&amp;#x000A;  render () {&amp;#x000A;    return ()&amp;#x000A;  }&amp;#x000A;}&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;div class='row'&gt;
&lt;div class='cell cell--s'&gt;
&lt;p&gt;
I left the constructor cause I knew I’d need it later and added a placeholder list, simulating the map that I’ll need eventually. Importing that into Exercises made this feel like I was finally getting somewhere.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/7341165085cd6341b890e9cd8b122fe90c7e6f98'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/rendered-data.jpg'&gt;
&lt;h3 id='time-to-use-preact'&gt;Time to Use Preact&lt;/h3&gt;
&lt;p&gt;Up until this point, I had been putting HTML into JavaScript. To apply logic, though, I needed to use one of the features of Preact. Technically, state is a feature of React that Preact shrinks down, but I digress.&lt;/p&gt;
&lt;p&gt;
The gist is that I want to show the SignIn component when there is no authed user and the ExerciseList when there is. To do this, I set a
&lt;code class='code-inline'&gt;currentUser&lt;/code&gt;
to null by default, listen for Firebase auth changes, and render based on the value of
&lt;code class='code-inline'&gt;currentUser&lt;/code&gt;
in state.
&lt;/p&gt;
&lt;h4 id='state-of-the-user'&gt;The State of the User&lt;/h4&gt;
&lt;p&gt;State is a concept that I don’t understand well enough to explain yet, but I’m no longer hung up on the OG front-end definition of it being a visual change to an element. Without a Shadow DOM framework, I would toggle a class on a parent element and use CSS to show the SignIn or ExerciseList HTML. Instead, I can assign values to keys in state to help Preact decide what to render (and when to re-render). We pay the price of learning a new system (and others building and maintaining new systems) to provide a better experience for users.&lt;/p&gt;
&lt;p&gt;The best part is that it’s straight forward. Here’s how I added a null user to state in ExerciseList.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class='language-js'&gt;import { h, Component } from 'preact';&amp;#x000A;&amp;#x000A;export default class extends Component {&amp;#x000A;  constructor() {&amp;#x000A;    super();&amp;#x000A;&amp;#x000A;    this.state = {&amp;#x000A;        currentUser: null&amp;#x000A;    };&amp;#x000A;  }&amp;#x000A;&amp;#x000A;  render() {&amp;#x000A;    return (&amp;#x000A;      &amp;lt;ul&amp;gt;&amp;#x000A;        &amp;lt;li&amp;gt;Exercise&amp;lt;/li&amp;gt;&amp;#x000A;        &amp;lt;li&amp;gt;Exercise&amp;lt;/li&amp;gt;&amp;#x000A;      &amp;lt;/ul&amp;gt;&amp;#x000A;    );&amp;#x000A;  }&amp;#x000A;}&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;div class='row'&gt;
&lt;div class='cell cell--s'&gt;
&lt;p&gt;
Viewing that in the React Developer Tools confirmed that it worked and that I had messed up. When I refactored, I forgot to assign a name to the class in ExerciseList, so it was rendering a
&lt;code class='code-inline'&gt;&lt;_default&gt;&lt;/code&gt;
component. Fixed that.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/ef267755b9ebaed6f5153d51f612aa7217bd8883'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;h4 id='adding-a-lifecycle-event'&gt;Adding a LifeCycle Event&lt;/h4&gt;
&lt;p&gt;
Another significant difference in Shadow DOM frameworks is lifecycle methods. They are another way of helping to decide what and when to render. In this case, I’m using
&lt;code class='code-inline'&gt;componentDidMount&lt;/code&gt;
to listen for Firebase auth methods. I also had to bring in
&lt;code class='code-inline'&gt;auth&lt;/code&gt;
from Firebase.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/d44ca9c668cc2ded666556b6a480ff067ec009ac'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
At this point, clicking the Sign In button changes the state of
&lt;code class='code-inline'&gt;currentUser&lt;/code&gt;
from
&lt;code class='code-inline'&gt;null&lt;/code&gt;
to an object that Firebase returns for the current user.
&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/user-attributes.jpg'&gt;
&lt;h4 id='render-and-rerender'&gt;Render and Re-render&lt;/h4&gt;
&lt;p&gt;The final bit to make this work was some conditional logic in the Exercises component’s render function. For that to work, it needed to bring in state and assign it within the render function.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class='language-js'&gt;import { h, Component } from 'preact';&amp;#x000A;import { auth, database } from '../firebase';&amp;#x000A;import ExerciseList from './ExerciseList';&amp;#x000A;import SignIn from '../SignIn';&amp;#x000A;&amp;#x000A;export default class Exercises extends Component {&amp;#x000A;  constructor() {&amp;#x000A;    super();&amp;#x000A;&amp;#x000A;    this.state = {&amp;#x000A;      currentUser: null&amp;#x000A;    };&amp;#x000A;  }&amp;#x000A;&amp;#x000A;  render() {&amp;#x000A;    const currentUser = this.state;&amp;#x000A;&amp;#x000A;    return (&amp;#x000A;      &amp;lt;section&amp;gt;&amp;#x000A;        {!currentUser &amp;&amp; &amp;lt;SignIn /&amp;gt;}&amp;#x000A;        {currentUser &amp;&amp; &amp;lt;ExerciseList /&amp;gt;}&amp;#x000A;      &amp;lt;/section&amp;gt;&amp;#x000A;    );&amp;#x000A;  }&amp;#x000A;}&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;div class='row'&gt;
&lt;div class='cell cell--s'&gt;
&lt;p&gt;With a user signed in, the UI is showing the ExerciseList component.&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/exercises-only.jpg'&gt;
&lt;p&gt;
While that would eventually be enough to complete the actions that I’ll want, it seemed like adding an avatar and a sign out button was in order. So, I added a CurrentUser component with some placeholders to start.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/67b99cd73b8ebe575bde7e7ac9926665febac5d1'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
Since this was an additional component within Exercises, I needed to wrap them in a single element (a JSX thing).
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/23227651e423f18e462b2776b4c2924409aaf35f'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;h4 id='passing-data-with-props'&gt;Passing Data with Props&lt;/h4&gt;
&lt;p&gt;
Since CurrentUser is a child of Exercises, it doesn’t have access to the
&lt;code class='code-inline'&gt;currentUser&lt;/code&gt;
state. (I know the naming is getting confusing.) Rather than declare and update state within CurrentUser, I passed it in via props as
&lt;code class='code-inline'&gt;user&lt;/code&gt;.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/9684a229780fbb424b9dc4d7cbccd471221df579'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/null-user.jpg'&gt;
&lt;p&gt;
It was at this point that I realized I had messed up again. State had a value for currentUser, but it was passing
&lt;code class='code-inline'&gt;null&lt;/code&gt;
to props. I can’t explain why, but I put the componentDidMount code in ExercisesList instead of Exercises. Fixing that made it so that the props was getting my user object.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/c5280a88a536f9801c5e4cb370e82eb48103c6d1'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
I also had explicitly rebound the
&lt;code class='code-inline'&gt;currentUser&lt;/code&gt;
constant in Exercises, which was adding a child object. I had done
&lt;code class='code-inline'&gt;const currentUser = this.state;&lt;/code&gt;
instead of
&lt;code class='code-inline'&gt;const { currentUser } = this.state;&lt;/code&gt;.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/f6d7c96b7343e1270eceee90a0628584a1a83544'&gt;fixed&lt;/a&gt;
&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/current-user.jpg'&gt;
&lt;h4 id='user-attributes-from-google-auth'&gt;User Attributes from Google Auth&lt;/h4&gt;
&lt;p&gt;
Now that I had access to the user object via Firebase, I could access the attributes. A
&lt;code class='code-inline'&gt;console.log&lt;/code&gt;
revealed all of them, so I used the
&lt;code class='code-inline'&gt;photoURL&lt;/code&gt;
and
&lt;code class='code-inline'&gt;displayName&lt;/code&gt;
for the alt attribute. This is to give some basic feedback that I’m in the correct account when I auth.
&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/console-log-user.jpg'&gt;
&lt;p&gt;
Preact passes props to the render functions, so I shortened up the attributes and added them to the image.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/ba9f3e2bee1f716f6ca597c7246049686e184fdd'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class='language-js'&gt;import { h, Component } from 'preact';&amp;#x000A;&amp;#x000A;export default class CurrentUser extends Component {&amp;#x000A;  constructor() {&amp;#x000A;    super();&amp;#x000A;  }&amp;#x000A;&amp;#x000A;  render() {&amp;#x000A;    const user = this.props.user;&amp;#x000A;    return (&amp;#x000A;      &amp;lt;article&amp;gt;&amp;#x000A;        &amp;lt;img alt={user.displayName} src={user.photoURL} width="40" /&amp;gt;&amp;#x000A;        &amp;lt;button&amp;gt;Sign Out&amp;lt;/button&amp;gt;&amp;#x000A;      &amp;lt;/article&amp;gt;&amp;#x000A;    );&amp;#x000A;  }&amp;#x000A;}&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;div class='row'&gt;
&lt;div class='cell cell--s'&gt;
&lt;h4 id='adding-sign-out-functionality'&gt;Adding Sign Out Functionality&lt;/h4&gt;
&lt;p&gt;
Arguably, I’d never want to sign out aside from testing, but it feels awful to not have the option. Even more so when it’s 2 lines of code to make it happen. The CurrentUser component needed access to Firebase auth and then the
&lt;code class='code-inline'&gt;auth.signOut()&lt;/code&gt;
method.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class='language-js'&gt;import { h, Component } from 'preact';&amp;#x000A;import { auth } from '../firebase';&amp;#x000A;&amp;#x000A;export default class CurrentUser extends Component {&amp;#x000A;  constructor() {&amp;#x000A;    super();&amp;#x000A;  }&amp;#x000A;&amp;#x000A;  render() {&amp;#x000A;    const user = this.props.user;&amp;#x000A;    return (&amp;#x000A;      &amp;lt;article&amp;gt;&amp;#x000A;        &amp;lt;img alt={user.displayName} src={user.photoURL} width="40" /&amp;gt;&amp;#x000A;        &amp;lt;button onClick={() =&amp;gt; auth.signOut()}&amp;gt;Sign Out&amp;lt;/button&amp;gt;&amp;#x000A;      &amp;lt;/article&amp;gt;&amp;#x000A;    );&amp;#x000A;  }&amp;#x000A;}&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;div class='row'&gt;
&lt;div class='cell cell--s'&gt;
&lt;p&gt;Whew. I now had a fully-functional Preact app with auth, all to see 2 lines of static HTML. It was time for the fun.&lt;/p&gt;
&lt;h2 id='planning-data'&gt;Planning Data&lt;/h2&gt;
&lt;p&gt;Knowing that Firebase stores data in JS objects, I imagined what the structure for the data would be in the planning portion of the project. I needed a series of exercises, which would have a name and a settingType. Those would have sessions with a setting and a flippable completed key. Each session would have an individual set with a timestamp and a completed key. I came up with:&lt;/p&gt;
&lt;pre&gt;&lt;code class='language-markdown'&gt;- exercises&amp;#x000A;  - exercise&amp;#x000A;    - name&amp;#x000A;    - settingType&amp;#x000A;    - sessions&amp;#x000A;      - setting&amp;#x000A;      - completed&amp;#x000A;      - sets&amp;#x000A;        - timestamp&amp;#x000A;        - completed&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id='no-plan-survives-contact-with-code'&gt;No Plan Survives Contact with Code&lt;/h3&gt;
&lt;p&gt;While that’s a misquote of a classic, it’s very true for me, and it was true for my plan for data. If you want a small test, peek at it and yell out what I’m missing. (It’s ok, the people around you will understand.)&lt;/p&gt;
&lt;p&gt;The first thing that I realized that I missed was users. While I thought that I’d be the only user, even for testing there would need to be 2. With this structure, exercises would be read/written by everyone. So, the first step was changing to users first.&lt;/p&gt;
&lt;pre&gt;&lt;code class='language-markdown'&gt;- user&amp;#x000A;  - exercises&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I also missed some attributes that I’d need and figured that creating sets after each completion round seemed like overkill. (That part was based on how I’d need to compare the recent data to determine when to raise the setting. Since I’d need to compare regardless, it was more work with no apparent benefit).&lt;/p&gt;
&lt;p&gt;The timestamp is unnecessary for the basic functionality, but I knew that I’d want to graph these in a future version and wanted to be sure to have the data. I ended up with:&lt;/p&gt;
&lt;pre&gt;&lt;code class='language-markdown'&gt;- user&amp;#x000A;  - exercise&amp;#x000A;    - name&amp;#x000A;    - setting&amp;#x000A;    - settingType&amp;#x000A;    - reps&amp;#x000A;    - raiseAfter&amp;#x000A;    - raiseBy&amp;#x000A;    - sets&amp;#x000A;      - set&amp;#x000A;        - setting&amp;#x000A;        - completed&amp;#x000A;        - completedDate&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class='row'&gt;
&lt;div class='cell cell--s'&gt;
&lt;p&gt;One of the awesome features about Firebase is that you can create the data in their UI to test it out before needing to hook up a form. (Kinda how you’d mock up with local JSON).&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/firebase-db-ui.jpg'&gt;
&lt;p&gt;I added 2 to make sure a loop works.&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/firebase-objects.jpg'&gt;
&lt;h2 id='getting-state-in-order'&gt;Getting State In Order&lt;/h2&gt;
&lt;p&gt;I learned the hard way to make sure that you get state configured correctly in your app before trying to render or create a form to add the data. In this app, data will be sent directly to Firebase. The data is then retrieved from Firebase and pushed into the local state.&lt;/p&gt;
&lt;h3 id='retrieving-data-from-firebase'&gt;Retrieving Data from Firebase&lt;/h3&gt;
&lt;p&gt;
Since I’m an authed user, Firebase will allow me to read and write to the database. Reading is done via a URL acting as an endpoint. In this case, it’s
&lt;code class='code-inline'&gt;https://pwa-preact-firebase.firebaseio.com/user01&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
I added
&lt;code class='code-inline'&gt;exercises: null&lt;/code&gt;
to state so that it can be updated once the data is retrieved. Some of the URL is in the config, so I access it by piecing together bits with my UID. That doesn’t match the dummy data that I added, so I hard-coded
&lt;code class='code-inline'&gt;user01&lt;/code&gt;
to test.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class='language-js'&gt;componentDidMount() {&amp;#x000A;  auth.onAuthStateChanged(currentUser =&gt; {&amp;#x000A;    this.setState({ currentUser });&amp;#x000A;  });&amp;#x000A;&amp;#x000A;  const exercisesRef = database.ref('/' + 'user01' + '/exercises');&amp;#x000A;&amp;#x000A;  exercisesRef.on('value', snapshot =&gt; {&amp;#x000A;    this.setState({ exercises: snapshot.val() });&amp;#x000A;  });&amp;#x000A;}&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;div class='row'&gt;
&lt;div class='cell cell--s'&gt;
&lt;p&gt;
Boom! Data coming from Firebase was now getting pushed directly into state, which would later determine what and when to render.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/765f2e221400d73ecabbd551d875289cf56c53a6'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/initial-state.jpg'&gt;
&lt;div class='stretch stretch--a mbm'&gt;
&lt;h4 id='a-learning-curveball'&gt;A Learning Curveball&lt;/h4&gt;
&lt;p class='mbxs'&gt;
Speaking of rendering, this was where everything fell apart for me. I didn’t know what I didn’t know, so I thought I needed to manually update state. I
&lt;a href='https://stackoverflow.com/questions/44912152/how-to-push-child-arrays-into-items-in-an-array-to-local-react-state-via-a-fire/44912797#44912797'&gt;asked on SO&lt;/a&gt;
and had an expensive first try of
&lt;a href='codementor.io'&gt;Code Mentor&lt;/a&gt;
without resolution. I was stuck for like three days straight, and it made me stop trying to make this a “build with me” video.
&lt;/p&gt;
&lt;p class='mbf'&gt;The issue was that I was supposed to just push state and output from it, but I had been trying to build a nested local state. It was Steve Kinney’s explanation of how Firebase stores data (and why to use Lodash) that finally made it click.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id='rendering-data-from-firebase'&gt;Rendering Data from Firebase&lt;/h3&gt;
&lt;p&gt;
Lodash’s map method works with nested objects like
&lt;code class='code-inline'&gt;.map()&lt;/code&gt;
does for arrays. Installing and importing that was the first step to rendering data.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/802932a538e5a6b167c8e33e74f0b4991c106aa2'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Since I wanted to loop over a user and their exercises, I needed both of those accessible within ExercisesList. I updated the render function in Exercises to include exercises and then assigned both as props.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class='language-js'&gt;render() {&amp;#x000A;  const { currentUser, exercises } = this.state;&amp;#x000A;&amp;#x000A;  return (&amp;#x000A;    &amp;lt;section&amp;gt;&amp;#x000A;      {!currentUser &amp;&amp; &amp;lt;SignIn /&amp;gt;}&amp;#x000A;      {currentUser &amp;&amp;&amp;#x000A;        &amp;lt;section&amp;gt;&amp;#x000A;            &amp;lt;ExerciseList exercises={exercises} user={currentUser} /&amp;gt;&amp;#x000A;            &amp;lt;CurrentUser user={currentUser} /&amp;gt;&amp;#x000A;        &amp;lt;/section&amp;gt;}&amp;#x000A;    &amp;lt;/section&amp;gt;&amp;#x000A;  );&amp;#x000A;}&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;div class='row'&gt;
&lt;div class='cell cell--s'&gt;
&lt;p&gt;
To ensure this worked, I rendered a single attribute in ExercisesList.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/d202ed355e4c59bbbaca034eba82ccbf5a74b679'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class='language-js'&gt;render() {&amp;#x000A;  const { user, exercises } = this.props;&amp;#x000A;  return (&amp;#x000A;    &amp;lt;section&amp;gt;&amp;#x000A;      {map(exercises, (exercise, key) =&amp;gt; &amp;lt;article&amp;gt;{exercise.name}&amp;lt;/article&amp;gt;)}&amp;#x000A;    &amp;lt;/section&amp;gt;&amp;#x000A;  );&amp;#x000A;}&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;div class='row'&gt;
&lt;div class='cell cell--s'&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/render-titles.jpg'&gt;
&lt;p&gt;
I knew that I was going to be adding a lot (well some) more functionality, so I wanted to push the HTML for an individual Exercise into its own component. That required passing the user, the key, and all of the attributes of an exercise in via props. This spread operator
&lt;code class='code-inline'&gt;{...exercise}&lt;/code&gt;
made that easy.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class='language-js'&gt;{map(exercises, (exercise, key) =&amp;gt; (&amp;#x000A;  &amp;lt;Exercise key={key} {...exercise} user={user} /&amp;gt;&amp;#x000A;))}&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;div class='row'&gt;
&lt;div class='cell cell--s'&gt;
&lt;p&gt;
To render them I added each of the ones that I wanted as constants before calling them in the HTML.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/d1bf95980bf1059dd726fac2f9297b186e38017c'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class='language-js'&gt;render() {&amp;#x000A;  const { name, setting, settingType } = this.props;&amp;#x000A;  return (&amp;#x000A;    &amp;lt;article&amp;gt;&amp;#x000A;      &amp;lt;h3&amp;gt;&amp;#x000A;        {name}&amp;#x000A;      &amp;lt;/h3&amp;gt;&amp;#x000A;      &amp;lt;p&amp;gt;&amp;#x000A;        &amp;lt;div&amp;gt;{setting}&amp;lt;/div&amp;gt; {settingType}&amp;#x000A;      &amp;lt;/p&amp;gt;&amp;#x000A;      &amp;lt;p&amp;gt;&amp;#x000A;        &amp;lt;button setting={setting}&amp;gt;&amp;#x000A;          Fail&amp;#x000A;        &amp;lt;/button&amp;gt;&amp;#x000A;        &amp;lt;button setting={setting}&amp;gt;&amp;#x000A;          Complete&amp;#x000A;        &amp;lt;/button&amp;gt;&amp;#x000A;      &amp;lt;/p&amp;gt;&amp;#x000A;    &amp;lt;/article&amp;gt;&amp;#x000A;  );&amp;#x000A;}&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;div class='row'&gt;
&lt;div class='cell cell--s'&gt;
&lt;p&gt;At this point, the skeleton was in place. I knew auth was working and I could retrieve and render data from Firebase. It was time to start adding data from the app.&lt;/p&gt;
&lt;h2 id='connecting-a-form-to-firebase'&gt;Connecting a Form to Firebase&lt;/h2&gt;
&lt;p&gt;
The data (exercises) needed to be tied to an account and only able to be created by signed in users, so I added NewExercise and rendered it when there was a
&lt;code class='code-inline'&gt;currentUser&lt;/code&gt;.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/8fda67a4af19b00d6a1e495b4afc5909724ce05a'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;To save this data, I needed to get all the values from the inputs, assign them to keys/values that match up with the data structure and send that structure to Firebase. It turned out that local state was great for handling the first part.&lt;/p&gt;
&lt;p&gt;I like to get one small bit working and then replicate, so I got the exercise name saving to state first.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class='language-js'&gt;import { h, Component } from 'preact';&amp;#x000A;&amp;#x000A;export default class NewExercise extends Component {&amp;#x000A;  constructor() {&amp;#x000A;    super();&amp;#x000A;&amp;#x000A;    this.state = {&amp;#x000A;      name: ''&amp;#x000A;    };&amp;#x000A;&amp;#x000A;    this.handleChange = this.handleChange.bind(this);&amp;#x000A;  }&amp;#x000A;&amp;#x000A;  handleChange(e) {&amp;#x000A;    this.setState({&amp;#x000A;      [e.target.name]: e.target.value&amp;#x000A;    });&amp;#x000A;  }&amp;#x000A;&amp;#x000A;  render() {&amp;#x000A;    const name = this.state;&amp;#x000A;    return (&amp;#x000A;      &amp;lt;section&amp;gt;&amp;#x000A;        &amp;lt;h2&amp;gt;New Exercise&amp;lt;/h2&amp;gt;&amp;#x000A;&amp;#x000A;        &amp;lt;form&amp;gt;&amp;#x000A;          &amp;lt;div&amp;gt;&amp;#x000A;            &amp;lt;label for="name"&amp;gt;Name&amp;lt;/label&amp;gt;&amp;#x000A;            &amp;lt;input&amp;#x000A;              type="text"&amp;#x000A;              name="name"&amp;#x000A;              onChange={this.handleChange}&amp;#x000A;              placeholder="Chest Press"&amp;#x000A;              value={this.state.name}&amp;#x000A;            /&amp;gt;&amp;#x000A;          &amp;lt;/div&amp;gt;&amp;#x000A;        &amp;lt;/form&amp;gt;&amp;#x000A;      &amp;lt;/section&amp;gt;&amp;#x000A;    );&amp;#x000A;  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;div class='row'&gt;
&lt;div class='cell cell--s'&gt;
&lt;p&gt;
I had learned this technique from tutorials. A function is used as a listener (handleChange) for changes to an input. When it’s changed, local state is updated.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/68888063a715ac0d9f55fa4578e43bdfe6977321'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/dynamic-name.jpg'&gt;
&lt;p&gt;
With that working, I added the rest of the data inputs. This meant adding each as empty to state by default, assign them to a variable from state, and creating an input to listen for events.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/7765fd1ee3ecfeb55d077ad1ba561019266f788d'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/state-attributes.jpg'&gt;
&lt;p&gt;
My favorite little bit (and something I had recently learned) was chaining all of the items into one
&lt;code class='code-inline'&gt;const&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class='language-js'&gt;const {&amp;#x000A;  name,&amp;#x000A;  setting,&amp;#x000A;  settingType,&amp;#x000A;  raiseAfter,&amp;#x000A;  raiseBy,&amp;#x000A;  reps&amp;#x000A;} = this.state;&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;div class='row'&gt;
&lt;div class='cell cell--s'&gt;
&lt;p&gt;
With the data in state, I now could use that and Firebase’s
&lt;code class='code-inline'&gt;push&lt;/code&gt;
method to handle the submission of the form. The impressive thing about
&lt;code class='code-inline'&gt;push&lt;/code&gt;
is that it creates a unique identifier, so I don’t have to things like “exercise01”. To do this, I needed to import the database and allow NewExercise to have access to the current user’s UID.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/1433ebed3c85cdc379efb175e2a5e453a5f682d8'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
This
&lt;code class='code-inline'&gt;handleSubmit&lt;/code&gt;
function blocks the default behavior of the form and sends data to the URL specified, which is based on the UID of the current user.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/3531509bf6009ce12da25421d135b134ab7efdaf'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class='language-js'&gt;handleSubmit(e) {&amp;#x000A;  e.preventDefault();&amp;#x000A;  const exercisesRef = database.ref('/' + this.props.user.uid + '/exercises');&amp;#x000A;  &amp;#x000A;  exercisesRef.push({&amp;#x000A;    name: this.state.name,&amp;#x000A;    setting: this.state.setting,&amp;#x000A;    settingType: this.state.settingType,&amp;#x000A;    reps: this.state.reps,&amp;#x000A;    raiseAfter: this.state.raiseAfter,&amp;#x000A;    raiseBy: this.state.raiseBy&amp;#x000A;  });&amp;#x000A;}&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;div class='row'&gt;
&lt;div class='cell cell--s'&gt;
&lt;p&gt;After submitting the form, I could see that the core data structure was the same, with the added benefit of unique keys.&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/dynamic-ids.jpg'&gt;
&lt;h2 id='adding-to-existing-data-in-firebase'&gt;Adding to Existing Data in Firebase&lt;/h2&gt;
&lt;p&gt;Now that an exercise existed, I needed to hook up the inputs to add sets to it. Since the bulk of the data that I needed to interact with was in ExerciseList, it seemed best to add the functions there and pass them into Exercise.&lt;/p&gt;
&lt;p&gt;Because I like to start small to make sure things are working properly, I started with failed exercises. These technically aren’t useful for anything in this version, but I know that I want to create sparklines of progress in the future, so I want to save the data behind the scenes for when I can’t complete a set. When that happens, I wanted to save the setting, the timestamp, and a boolean of false.&lt;/p&gt;
&lt;p&gt;
I created a
&lt;code class='code-inline'&gt;handleFailed&lt;/code&gt;
function with a slightly more complex URL to point to in Firebase. It looks up the user, then the setting of the current exercise, and pushes data to it. The function itself is passed into Exercise, which requires binding props in the constructor.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class='language-js'&gt;handleFailed(key) {&amp;#x000A;  const currentUser = this.props.user;&amp;#x000A;  const setting = this.props.exercises[key].setting;&amp;#x000A;&amp;#x000A;  database&amp;#x000A;    .ref("/" + currentUser.uid)&amp;#x000A;    .child("exercises")&amp;#x000A;    .child(key)&amp;#x000A;    .child("/sets")&amp;#x000A;    .push({&amp;#x000A;      completed: false,&amp;#x000A;      completedDate: Date.now(),&amp;#x000A;      setting: setting&amp;#x000A;    });&amp;#x000A;}&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;div class='row'&gt;
&lt;div class='cell cell--s'&gt;
&lt;p&gt;
The hard-coded
&lt;code class='code-inline'&gt;user01&lt;/code&gt;
that I had used for ensuring the FB data worked earlier came back into play here, so I had to update it to use the current user as well:
&lt;code class='code-inline'&gt;const exercisesRef = database.ref( '/' + this.state.currentUser.uid + '/exercises' );&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
Since I was looking for that UID too early, I had to move that within Firebase’s
&lt;code class='code-inline'&gt;onAuthStateChanged&lt;/code&gt;
method.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/eaa4bf534cc47b70604f50ca3546df9a61bfa5b0'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;With that in place, clicking the Fail button adds data with a unique identifier to the current exercise.&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/fail-data.jpg'&gt;
&lt;h3 id='adding-data-conditionally'&gt;Adding Data Conditionally&lt;/h3&gt;
&lt;p&gt;Adding data for completions required some logic, and I don’t love the organization of this function, but it works. The gist is that before sending the data, the total number of completions needs to be compared to the number of completions to “raise after.” Once the number of completions is 1 less than the “raise after,” it needs to push the completion data and update the setting by the “raise by” amount.&lt;/p&gt;
&lt;p&gt;First things first, I created some constants to make the comparisons more readable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class='language-js'&gt;const currentUser = this.props.user;&amp;#x000A;const raiseAfter = this.props.exercises[key].raiseAfter;&amp;#x000A;const raiseBy = this.props.exercises[key].raiseBy;&amp;#x000A;const setting = this.props.exercises[key].setting;&amp;#x000A;const completedCount = filter(this.props.exercises[key].sets, {&amp;#x000A;  setting: setting,&amp;#x000A;  completed: true&amp;#x000A;}).length;&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;div class='row'&gt;
&lt;div class='cell cell--s'&gt;
&lt;p&gt;To get the completed count, I needed to filter the results using lodash. Then I used them to create the basic push (when completed is at least 2 less than the amount to raise by).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class='language-js'&gt;if (completedCount &lt; raiseAfter - 1) {&amp;#x000A;  database&amp;#x000A;    .ref("/" + currentUser.uid)&amp;#x000A;    .child("exercises")&amp;#x000A;    .child(key)&amp;#x000A;    .child("/sets")&amp;#x000A;    .push({&amp;#x000A;      completed: true,&amp;#x000A;      completedDate: Date.now(),&amp;#x000A;      setting: setting&amp;#x000A;    });&amp;#x000A;}&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;div class='row'&gt;
&lt;div class='cell cell--s'&gt;
&lt;p&gt;Because I was dealing with integers and decimals for settings and JavaScript hates math with decimals, I needed to tack on some methods to check for a decimal number and output differently when there is one. Thank goodness for Stack Overflow!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class='language-js'&gt;else {&amp;#x000A;  const newSetting = function checkForDecimal() {&amp;#x000A;    if (raiseBy.indexOf(".") === -1) {&amp;#x000A;      return Number(setting) + Number(raiseBy);&amp;#x000A;    } else {&amp;#x000A;      return (Number(setting) + Number(raiseBy)).toFixed(1);&amp;#x000A;    }&amp;#x000A;  }&amp;#x000A;}&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;div class='row'&gt;
&lt;div class='cell cell--s'&gt;
&lt;p&gt;When the number of completions is one less than the amount to complete before raising, completing one should add the completed data and raise the setting.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class='language-js'&gt;database&amp;#x000A;  .ref("/" + currentUser.uid)&amp;#x000A;  .child("exercises")&amp;#x000A;  .child(key)&amp;#x000A;  .child("/sets")&amp;#x000A;  .push({&amp;#x000A;    completed: true,&amp;#x000A;    completedDate: Date.now(),&amp;#x000A;    setting: setting&amp;#x000A;  });&amp;#x000A;database&amp;#x000A;  .ref("/" + currentUser.uid)&amp;#x000A;  .child("exercises")&amp;#x000A;  .child(key)&amp;#x000A;  .update({ setting: newSetting });&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;div class='row'&gt;
&lt;div class='cell cell--s'&gt;
&lt;p&gt;
Similar to
&lt;code class='code-inline'&gt;handleFailed&lt;/code&gt;,
I then needed to pass a function into Exercise and call it on the button in there.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/5f84e9564c3f4c665c6b33b22d075106da13c873'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;This part felt magical because it’s so fast. On clicking the “complete” button, it pushes the new setting. Because Preact is always listening for state changes, it grabs that new setting and renders it.&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/setting-update.gif'&gt;
&lt;p&gt;
The final bit of functionality for this version was outputting an indicator that the data was updated. As a progress tracker, I wanted visual feedback of progress. To do this, I needed to use
&lt;code class='code-inline'&gt;filter&lt;/code&gt;
to only output completed sets and
&lt;code class='code-inline'&gt;map&lt;/code&gt;
to loop over the filtered results.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/31d0d1ecf4f6b648047c36cc0b53cc294865eea4'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class='language-js'&gt;import { h, Component } from 'preact';&amp;#x000A;import { filter, map } from 'lodash';&amp;#x000A;&amp;#x000A;export default class Exercise extends Component {&amp;#x000A;  constructor() {&amp;#x000A;    super();&amp;#x000A;  }&amp;#x000A;&amp;#x000A;  render() {&amp;#x000A;    const {&amp;#x000A;      name,&amp;#x000A;      setting,&amp;#x000A;      settingType,&amp;#x000A;      sets,&amp;#x000A;      handleCompleted,&amp;#x000A;      handleFailed&amp;#x000A;    } = this.props;&amp;#x000A;    const filters = filter(sets, {&amp;#x000A;      setting,&amp;#x000A;      completed: true&amp;#x000A;    });&amp;#x000A;&amp;#x000A;    return (&amp;#x000A;      &amp;lt;article&amp;gt;&amp;#x000A;        &amp;lt;h3&amp;gt;&amp;#x000A;          {name}&amp;#x000A;        &amp;lt;/h3&amp;gt;&amp;#x000A;        &amp;lt;p&amp;gt;&amp;#x000A;          &amp;lt;div&amp;gt;{setting}&amp;lt;/div&amp;gt; {settingType}&amp;#x000A;        &amp;lt;/p&amp;gt;&amp;#x000A;        &amp;lt;p&amp;gt;&amp;#x000A;          &amp;lt;button onClick={handleFailed} setting={setting}&amp;gt;&amp;#x000A;  Fail&amp;#x000A;          &amp;lt;/button&amp;gt;&amp;#x000A;          &amp;lt;button onClick={handleCompleted} setting={setting}&amp;gt;&amp;#x000A;  Complete&amp;#x000A;          &amp;lt;/button&amp;gt;&amp;#x000A;        &amp;lt;/p&amp;gt;&amp;#x000A;        &amp;lt;ul&amp;gt;&amp;#x000A;          {sets &amp;&amp; map(filters, (filter, key) =&amp;gt; &amp;lt;li key={key}&amp;gt;{key}&amp;lt;/li&amp;gt;)}&amp;#x000A;        &amp;lt;/ul&amp;gt;&amp;#x000A;      &amp;lt;/article&amp;gt;&amp;#x000A;    );&amp;#x000A;  }&amp;#x000A;}&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;div class='row'&gt;
&lt;div class='cell cell--s'&gt;
&lt;p&gt;To verify it was working without digging through Dev Tools, I rendered a list with the key, knowing that I’d make that more like “eye candy” with CSS.&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/render-keys.jpg'&gt;
&lt;h2 id='adding-global-styles'&gt;Adding Global Styles&lt;/h2&gt;
&lt;p&gt;
CSS in JS is new to me, and I don’t have a clear methodology yet. However, this was small enough that it doesn’t matter much. I made a
&lt;code class='code-inline'&gt;variables.scss&lt;/code&gt;
for a few colors, and it felt like overkill for this, but something I would want to do for future projects.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class='language-css'&gt;$c-bg: #313743;&amp;#x000A;$c-bg-light: #30353f;&amp;#x000A;$c-negative: #a24335;&amp;#x000A;$c-positive: #7b9058;&amp;#x000A;$c-text: #ffffff;&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;div class='row'&gt;
&lt;div class='cell cell--s'&gt;
&lt;p&gt;
I then added a font from Google Fonts, reset font weights, and added default styles to inputs and buttons. I usually set a variable for spacing and use rems, but I stayed with pixels. Those styles got it headed in the right direction, and I wanted to try component-level styles for the rest.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/2a46dc62d08169bc8ae66ab03fab99df6626c09f'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/base-styles.jpg'&gt;
&lt;h2 id='adding-component-level-styles'&gt;Adding Component-Level Styles&lt;/h2&gt;
&lt;h3 id='individual-exercise'&gt;Individual Exercise&lt;/h3&gt;
&lt;p&gt;
The individual exercise got the most work, and it felt a little weird to duplicate so many styles. I’m used to modifier classes, but it was also awesome to use basic names and have them get unique names automatically.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/2f19737e4022e7f92732007d4af92b9bbed18ff8'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/individual-exercise.jpg'&gt;
&lt;h3 id='new-exercise-form'&gt;New Exercise Form&lt;/h3&gt;
&lt;p&gt;
This form will have minimal use going forward, so I’ll likely tuck it away in a future version, but meanwhile, I wanted it to be a little more usable.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/2f19737e4022e7f92732007d4af92b9bbed18ff8'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/new-exercise-form.jpg'&gt;
&lt;h3 id='current-user'&gt;Current User&lt;/h3&gt;
&lt;p&gt;
This part is just for sanity’s sake, so I just gave it a touch of alignment.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/c411f534e2c8846f519ee4ee383914802b68c831'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;h3 id='home'&gt;“Home”&lt;/h3&gt;
&lt;p&gt;
The signed out experience needed some love, and I set a max-width in case I ever bring my laptop to the gym. (JK)
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/a17d2d6ac207f3fa74c361a4aa410c20d9fabda3'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/full-screen.jpg'&gt;
&lt;h3 id='cleaning-up-some-scss'&gt;Cleaning Up Some SCSS&lt;/h3&gt;
&lt;p&gt;
In my original version, I was designing in the browser, so the CSS was being written on the fly. In this, I went through and applied the variables just so that I know it can be done.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/2f5b98f393e39fc20022abd155d502192d7b4ca3'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;h2 id='save-to-home-assets'&gt;Save to Home Assets&lt;/h2&gt;
&lt;p&gt;
This web app will be saved on my phone, and there are some settings and icons that can be displayed that make it feel native. I didn’t put much time into it but made the colors match and put an icon of some weights. I have some ideas for v2 that will make this more fun.
&lt;a class='commit' href='https://github.com/dandenney/building-a-small-pwa-with-preact-and-firebase/commit/f0b434e760a5d93555236296eebfb867b4b312b5'&gt;commit&lt;/a&gt;
&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/pixel.jpg'&gt;
&lt;h2 id='deploying-to-firebase'&gt;Deploying to Firebase&lt;/h2&gt;
&lt;p&gt;
Firebase is perfect for side projects like this. In addition to all of the other features, hosting via HTTPS is part of the
&lt;a href='https://firebase.google.com/pricing/'&gt;free plan&lt;/a&gt;.
Their CLI makes it seamless, as well. Don't be like me and get so excited about it that you forget to build your app with Preact and deploy nothing, which is what I did just now.
&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/firebase-cli.jpg'&gt;
&lt;h2 id='build-first-then-deploy'&gt;Ok, Build First, Then Deploy&lt;/h2&gt;
&lt;p&gt;
After running a build with
&lt;code class='code-inline'&gt;preact build&lt;/code&gt;
I saw that I had done something (probably the combo of Firebase and lodash) that added a lot of weight to my app. That will have to wait for later.
&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/build-warning.jpg'&gt;
&lt;h2 id='lighthouse-test'&gt;Lighthouse Test&lt;/h2&gt;
&lt;p&gt;The results of this test are why the CLI was valuable. I didn’t have to do any of the service worker and manifest setup, so I have a smooth 100. If you haven’t done that stuff before, you should try it manually, though.&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/pwa-score.jpg'&gt;
&lt;p&gt;The performance dropped over 10 points from the default, and I’ll have to figure out what is causing that. It won’t matter to me for this app, but I want to learn how to troubleshoot it. My gut says it’s a combo of the font request, the Firebase data request, and lodash.&lt;/p&gt;
&lt;img class='stretch stretch--b mbs' src='/assets/images/posts/front-end-dev/building-a-small-pwa-with-preact-and-firebase/perf-score.jpg'&gt;
&lt;h2 id='make-it-better'&gt;Make It Better&lt;/h2&gt;
&lt;p&gt;At this point, it is usable, but not an experience I'd ship to others. When you auth, there is some downtime as it transitions, which feels janky. Once it’s loaded, it’s good, though. Goals for v2 improvements:&lt;/p&gt;
&lt;ul class='list'&gt;
&lt;li class='mbf'&gt;Fix the console errors when you are signed out&lt;/li&gt;
&lt;li class='mbf'&gt;Over 80 in Lighthouse perf score&lt;/li&gt;
&lt;li class='mbf'&gt;Loading animation with a smooth transition from sign in and on load&lt;/li&gt;
&lt;li&gt;Visual indicator for failures (they save with no feedback)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also want to add some reporting because I’m all about that data, that data. It’d be overkill to do full graphs, but I want some sparklines that show when I struggle to advance a setting and counts of the total number of exercises done.&lt;/p&gt;
&lt;h2 id='thank-you'&gt;Thank You&lt;/h2&gt;
&lt;p&gt;If you made it this far, wow, thank you. When you’ve had a nice long rest, I’d love to know that you thought.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Turning the Page</title>
    <link rel="alternate" href="http://blog.url.com/posts/general/turning-the-page"/>
    <id>http://blog.url.com/posts/general/turning-the-page</id>
    <published>2017-07-01T20:00:00-04:00</published>
    <updated>2017-07-02T19:54:36-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;style&gt;
  /* line 1, (__TEMPLATE__) */
  .shrug {
    font-size: 300%;
    text-align: center; }
  
  /* line 4, (__TEMPLATE__) */
  .lyrics {
    background: #f9f9f9;
    padding: 1.5rem; }
&lt;/style&gt;
&lt;article&gt;
&lt;p class='mbxs tac'&gt;
&lt;img class='db' src='/assets/images/posts/general/turning-the-page/in-memoriam.jpg' width='700'&gt;
&lt;div class='tss'&gt;
I use a :tombstone: in Slack and say RIP a lot, so this was my going away message :)
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
A short while ago, I was &lt;a href='https://twitter.com/i/web/status/859761496464773120'&gt;joking with Fabio Carneiro&lt;/a&gt; about writing a post when you leave your position with a company, and now I find myself doing it. The past five years have been the best of my life, and a lot of that is due to the people I've worked with at Envy Labs, Code School, and Pluralsight. I can't name everyone because this would just be a long list of the people that I've directly worked with.
&lt;/p&gt;
&lt;p&gt;
Throughout those years, I have learned so much about building the web, growing a digital product, adjusting the size and scope of teams, and the challenges involved with shifting markets. The most important part is that I had so much fun doing it. I've made friendships that I will cherish forever and had countless incredible moments with awesome people. Thank you to each and every one of you for the laughs, the camaraderie, and for teaching me.
&lt;/p&gt;
&lt;p&gt;
There's no way that I could write this without a specific "Thank You" to &lt;a href='https://twitter.com/greggpollack'&gt;Gregg Pollack&lt;/a&gt; for creating things that have had a hugely positive impact on all the people that I've worked with and millions around the world. Gregg is one of the kindest and most generous people that I have ever met, and my whole family has benefitted from the companies that he created.
&lt;/p&gt;
&lt;p&gt;
&lt;img src='/assets/images/posts/general/turning-the-page/comfort-wants-you-dead.jpg'&gt;
&lt;/p&gt;
&lt;h2&gt;"Comfort Wants You Dead"&lt;/h2&gt;
&lt;p&gt;
I bought this &lt;a href='https://dribbble.com/shots/1746603-Comfort-Wants-You-Dead'&gt;t-shirt from Nathan Yoder&lt;/a&gt; as soon as I saw it and it's the best explanation that I can give for how I could leave this role with all these people who I care about. I've been comfortable. I have a good salary, generous benefits, an insanely flexible schedule, and I work from home.
&lt;/p&gt;
&lt;p&gt;
I was comfortable in my position when an unfortunate scenario led to a fantastic person (who hired me) losing his job. I was comfortable when our founder left, our team structures changed, and for the past few months after two friends (and two of the three front-end people I worked with directly for years) left.
&lt;/p&gt;
&lt;p&gt;
Recently, I realized that I have been viewing things through the lens of my comfort level and forgetting a bit of what's important to me. There's this fantastic song by Passenger, "&lt;a href='https://open.spotify.com/track/1Sb0F7I9bGa4VfPbgm0BoL'&gt;All The Little Lights&lt;/a&gt;", with this hook:
&lt;/p&gt;
&lt;p class='lyrics'&gt;
We're born with millions
&lt;br&gt;
Of little lights shining in the dark
&lt;br&gt;
And they show us the way
&lt;br&gt;
One lights up, every time you feel love in your heart
&lt;br&gt;
One dies when it moves away
&lt;/p&gt;
&lt;p&gt;
I hadn't been recognizing (or maybe prioritizing) that a lot of my little lights had burned out in the last couple of years. I was comfortable, and it was slowly killing me. So, I decided to change it.
&lt;/p&gt;
&lt;h2&gt;"What's Next?"&lt;/h2&gt;
&lt;p&gt;
&lt;div class='shrug'&gt;¯\_(ツ)_/¯&lt;/div&gt;
I truly don't know. I talked with my manager (another person that I'll miss) and gave notice without a plan.
&lt;/p&gt;
&lt;p&gt;
I know what makes me come alive: working with good people towards a goal, building things for the web that benefit people, and sharing knowledge.
&lt;/p&gt;
&lt;p&gt;
I know that the industry has shifted a lot in the time that I've been working on Code School and that I need to deepen my JS knowledge to stay competitive.
&lt;/p&gt;
&lt;p&gt;
I know that I'm going to spend a little time learning, sharing, and shipping a few small things that I've been tinkering on.
&lt;/p&gt;
&lt;p&gt;
I hope that will lead me to what's next...
&lt;/p&gt;
&lt;/article&gt;
</content>
  </entry>
  <entry>
    <title>Stumbling Through Learning About Event Listeners</title>
    <link rel="alternate" href="http://blog.url.com/posts/front-end-dev/stumbling-through-learning-about-event-listeners"/>
    <id>http://blog.url.com/posts/front-end-dev/stumbling-through-learning-about-event-listeners</id>
    <published>2016-09-14T20:00:00-04:00</published>
    <updated>2017-07-01T14:35:59-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;style&gt;
  /* line 1, (__TEMPLATE__) */
  .stretch {
    border: 10px solid #ffffff;
    box-sizing: border-box;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);
    position: relative; }
    @media screen and (min-width: 840px) {
      /* line 1, (__TEMPLATE__) */
      .stretch {
        left: -40px;
        max-width: 800px;
        width: 800px; } }
  
  /* line 12, (__TEMPLATE__) */
  .stretch--a {
    border: 10px solid #f9f9f9; }
  
  /* line 15, (__TEMPLATE__) */
  .stretch--b {
    border: 0;
    box-shadow: none; }
  
  /* line 19, (__TEMPLATE__) */
  strong {
    font-weight: 600; }
  
  /* line 22, (__TEMPLATE__) */
  code {
    font-size: 16px; }
  
  /* line 25, (__TEMPLATE__) */
  .refactor {
    background: #f5f5f5;
    padding: 20px; }
&lt;/style&gt;
&lt;article&gt;
&lt;p&gt;
&lt;strong&gt;Disclaimer:&lt;/strong&gt;
In this post, I am sharing something that I've been learning. It's in no way a how-to and in fact I'd love feedback on better ways to do what I've done.
&lt;/p&gt;
&lt;p&gt;
I had been progressing pretty well lately in learning vanilla JS and it felt awesome. Then I hit a wall in doing something that I thought was straight forward. I ended up putting about 5-6 hours into grokking how to get a value out of an event listener, that time being split between attempts, googling, reading Stack Overflows, reading the docs, pairing with a coworker, and &lt;em&gt;maybe&lt;/em&gt; an hour sitting like this.
&lt;/p&gt;
&lt;img class='mbm db mhc' src='/assets/images/posts/front-end-dev/stumbling-through-learning-about-event-listeners/gif-matt-damon-crying.gif'&gt;
&lt;h2&gt;(If this, then that) * 999&lt;/h2&gt;
&lt;p&gt;
The fun part of front-end development is that there are likely 999 ways to solve the problem that I was facing. Having chosen one, I then tried about 423 ways to achieve it before getting it to work. If I wasn’t so focused on improving my skills I might have switched away to a different solution, but I had to know that I could do this.
&lt;/p&gt;
&lt;h2&gt;A reduced test case&lt;/h2&gt;
&lt;p&gt;
The original problem was that I wanted to validate 2 datetime-local inputs. If the second datetime value is after the first, then submit a form to Firebase. The problem with sharing that for help was that there was so much unnecessary code (the date conversions, Firebase submission, etc.)
&lt;/p&gt;
&lt;p&gt;
In this pen I simplified it and named the variables and functions in a way to describe what I was trying to achieve because I knew I needed help.
&lt;/p&gt;
&lt;p data-height="265" data-theme-id="0" data-slug-hash="OREBzg" data-default-tab="js,result" data-user="dandenney" data-embed-version="2" class="codepen"&gt;See the Pen &lt;a href="http://codepen.io/dandenney/pen/OREBzg/"&gt;Closure issue?&lt;/a&gt; by Dan Denney (&lt;a href="http://codepen.io/dandenney"&gt;@dandenney&lt;/a&gt;) on &lt;a href="http://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p class='mts'&gt;
To make it simple, this is comparing the value of two selects with numbers from 1-4. I knew how to get those values and compare them within the event listener, but I didn’t know how to get that value to bubble up to the parent function. (I wanted to do this because I knew I could then conditionally submit the form based on the true/false result of the comparison.) It turns out &lt;a href="http://stackoverflow.com/questions/26373208/returning-a-variable-from-a-listener-function-javascript"&gt;that you can’t&lt;/a&gt;, at least not directly. I had stumbled into some &lt;a href="http://stackoverflow.com/questions/23667086/why-is-my-variable-unaltered-after-i-modify-it-inside-of-a-function-asynchron"&gt;complex territory&lt;/a&gt;, obliviously.
&lt;/p&gt;
&lt;p&gt;
Reiterating from above, I could have opted to do something different like disable/enable the submit button from the event listeners. However, this became more about learning how to get that value out of there because it seems like an important concept to understand.
&lt;/p&gt;
&lt;h2&gt;A solution&lt;/h2&gt;
&lt;p&gt;
I know about 422 ways that you cannot return a value out of an event listener and use it in a separate function. I now know one way that you can and I’m sharing it here. It’s not elegant and it may not even be "right", but it works. Hopefully a few people more advanced than I am will chime in with 1 of the 999 other ways that you can do this.
&lt;/p&gt;
&lt;p data-height="265" data-theme-id="0" data-slug-hash="OREBzg" data-default-tab="js,result" data-user="dandenney" data-embed-version="2" class="codepen"&gt;See the Pen &lt;a href="http://codepen.io/dandenney/pen/OREBzg/"&gt;Closure issue?&lt;/a&gt; by Dan Denney (&lt;a href="http://codepen.io/dandenney"&gt;@dandenney&lt;/a&gt;) on &lt;a href="http://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p class='mts'&gt;
The “solution” was creating a retrieval function that can be shared between the two. The least technical explanation of this ever is that it is necessary because nothing is “listening” for updates from the event listener. I was trying to update the parent function or variables in it, but that can’t work without calling the function again.
&lt;/p&gt;
&lt;p&gt;
As a workaround, I created a retrieval function to sit in the middle of the two. It runs when the select event happens and its value is then updated. Since that function now has an updated value, it can be used as a check on whether or not to proceed in a separate function.
&lt;/p&gt;
&lt;p&gt;
In this example, if the second select value is greater than the first, then sending should be allowed. If not, then it shouldn’t. 5-6 hours and a blog post later, the “simple” thing that I was trying to do is working.
&lt;/p&gt;
&lt;script async src="//assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;
&lt;/article&gt;
</content>
  </entry>
  <entry>
    <title>I'm Learning How to Solve Problems with JavaScript</title>
    <link rel="alternate" href="http://blog.url.com/posts/front-end-dev/learning-javascript-problem-solving"/>
    <id>http://blog.url.com/posts/front-end-dev/learning-javascript-problem-solving</id>
    <published>2016-08-07T20:00:00-04:00</published>
    <updated>2017-07-01T14:35:59-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;style&gt;
  /* line 1, (__TEMPLATE__) */
  .stretch {
    border: 10px solid #ffffff;
    box-sizing: border-box;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);
    position: relative; }
    @media screen and (min-width: 840px) {
      /* line 1, (__TEMPLATE__) */
      .stretch {
        left: -40px;
        max-width: 800px;
        width: 800px; } }
  
  /* line 12, (__TEMPLATE__) */
  .stretch--a {
    border: 10px solid #f9f9f9; }
  
  /* line 15, (__TEMPLATE__) */
  .stretch--b {
    border: 0;
    box-shadow: none; }
  
  /* line 19, (__TEMPLATE__) */
  strong {
    font-weight: 600; }
  
  /* line 22, (__TEMPLATE__) */
  code {
    font-size: 16px; }
  
  /* line 25, (__TEMPLATE__) */
  .refactor {
    background: #f5f5f5;
    padding: 20px; }
  
  @media screen and (min-width: 1040px) {
    /* line 31, (__TEMPLATE__) */
    .title-shift {
      background: #fff;
      border: 20px solid #fff;
      margin: -120px -20px 0 -20px; }
  
    /* line 36, (__TEMPLATE__) */
    .row.ov {
      overflow: visible; } }
&lt;/style&gt;
&lt;img src='/assets/images/posts/front-end-dev/learning-javascript-problem-solving/crash-js.svg'&gt;
&lt;article&gt;
&lt;div class='row ov'&gt;
&lt;div class='cell cell--s'&gt;
&lt;h1 class='title-shift mtm'&gt;&lt;/h1&gt;
&lt;p&gt;
&lt;strong&gt;Disclaimer:&lt;/strong&gt;
In this post, I am sharing something that I've been learning. It's in no way a how-to and in fact I'd love feedback on better ways to do what I've done.
&lt;/p&gt;
&lt;p&gt;
I've been focused on learning functional or programmatic JavaScript lately, trying to step up my game from the presentational side of things. Without a Comp Sci background, there's more to learn than syntax. I have to think about how to approach problems and that is as big of a learning curve as the syntax is for me.
&lt;/p&gt;
&lt;p&gt;
While driving around my daughter and her boyfriend this weekend, he popped out one of those school questions: "2 trains are 1000 feet apart. One train is going 80 miles per hour, one is going 60 miles per hour. How long before they crash?" (It turns out he was using it as a riddle because he said feet, but my mind was already running.)
&lt;/p&gt;
&lt;h2&gt;Which came first, the solution or the code?&lt;/h2&gt;
&lt;p&gt;
In thinking about miles instead, this seemed like the perfect small thing to work through solving. The first step required figuring out a way to solve the problem before thinking about how to code it.
&lt;/p&gt;
&lt;p&gt;
My thinking was that if I add the 2 speeds together, they are a "cycle". Then it would be a matter of dividing the total number by the number of cycles. To make sure it would work, I created a spreadsheet to test it. (Not while I was in the car)
&lt;/p&gt;
&lt;img src='/assets/images/posts/front-end-dev/learning-javascript-problem-solving/spreadsheet.png'&gt;
&lt;h2 class='mtm'&gt;"How do I code this?"&lt;/h2&gt;
&lt;p&gt;
My first step was thinking about how to do small portions of this. My former self (like before right now), would have wrote this in one loooong function. I've learned bits and pieces about organization and creating functions that handle one specific thing from &lt;a href="http://drewbarontini.com"&gt;Drew&lt;/a&gt; and want to start putting that to use.
&lt;/p&gt;
&lt;h2&gt;Step One: Calculate the number of cycles&lt;/h2&gt;
&lt;p&gt;
Like in the spreadsheet, I want code that will add 80 + 60, divide that number into 1000 and output 7.14. I also want each of those numbers to be able to be changed, but I started with the exact ones to check accuracy.
&lt;/p&gt;
&lt;pre class='stretch stretch--b'&gt;&lt;code class='language-js'&gt;function calculateCycles(distance, speedA, speedB) {&amp;#x000A;  var distance = distance;&amp;#x000A;  var speedA = speedA;&amp;#x000A;  var speedB = speedB;&amp;#x000A;  var cycle = speedA + speedB;&amp;#x000A;  var cycleCount = distance / cycle;&amp;#x000A;  return cycleCount;&amp;#x000A;};&amp;#x000A;&amp;#x000A;calculateCycles(1000, 80, 60);&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote class='refactor mbm mlf mrf mtm'&gt;
&lt;h3 class='mtf'&gt;Refactor&lt;/h3&gt;
&lt;p class='mbf'&gt;
Jon Roberts shared something that instantly makes this more efficient. I was wrong in thinking that I had to explicitly declare arguments that are passed into variables.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class='stretch stretch--b'&gt;&lt;code class='language-js'&gt;function calculateCycles(distance, speedA, speedB) {&amp;#x000A;	return distance / (speedA + speedB)&amp;#x000A;}&amp;#x000A;&amp;#x000A;calculateCycles(1000, 80, 60);&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;p class='mtm'&gt;
If you copy and paste that into the console, you should get 7.142857142857143. Technically speaking that's the answer, but I doubt any teacher would accept 7.14 hours and it's not very friendly. I wanted the answer in hours, minutes, and seconds.
&lt;/p&gt;
&lt;p&gt;
To avoid my one giant function, I'm returning the value at the end of the function so that I can call it elsewhere. I had to search for &lt;a href="http://stackoverflow.com/questions/19674992/javascript-using-a-return-value-in-another-function"&gt;a reminder&lt;/a&gt; on how to do that.
&lt;/p&gt;
&lt;h2&gt;Step Two: Calculate the time of the cycles&lt;/h2&gt;
&lt;p&gt;
Converting the number into hours, minutes, and seconds was a multi-step process and I was glad I had learned about the remainder functions. Again, I needed &lt;a href="http://stackoverflow.com/questions/4228356/integer-division-in-javascript"&gt;a reminder&lt;/a&gt; on the best way to handle that. The conversion is somewhat backwards, then forwards. I first needed to get the total number of seconds using the number of cycles.
&lt;/p&gt;
&lt;p&gt;
That total number could be divided by number of seconds in hours, using the remainder to do the same for minutes and then seconds. The answer requires 3 values: a number of hours, minutes, and seconds. So, the output of of this function is an array of those 3 values.
&lt;/p&gt;
&lt;pre class='stretch stretch--b'&gt;&lt;code class='language-js'&gt;function calculateTime() {&amp;#x000A;  var cycles = calculateCycles(1000, 80, 60);&amp;#x000A;  var secondsPerHour = 60 * 60;&amp;#x000A;  var secondsTotal = secondsPerHour * cycles;&amp;#x000A;  var hoursRemainder = cycles % 1;&amp;#x000A;  var hoursResult = (secondsTotal / secondsPerHour &gt;&gt; 0);&amp;#x000A;  var minutesInitial = hoursRemainder * 60;&amp;#x000A;  var minutesRemainder = minutesInitial % 1;&amp;#x000A;  var minutesResult = (minutesInitial &gt;&gt; 0);&amp;#x000A;  var secondsResult = (minutesRemainder * 60) &gt;&gt; 0;&amp;#x000A;  return [hoursResult, minutesResult, secondsResult];&amp;#x000A;}&amp;#x000A;&amp;#x000A;calculateTime();&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;p class='mtm'&gt;
This one can be pasted into the console, too, but you'll need to have all the code from before for it to run. If you do, you should get &lt;code&gt;[7, 8, 34]&lt;/code&gt;. I have a CodePen at the end of the post that you can play with instead of trying to copy and paste these into the console.
&lt;/p&gt;
&lt;h2&gt;Step Three: Output the answer&lt;/h2&gt;
&lt;p&gt;
For the most part, the output was something I've been doing a lot lately. However, I was accessing the array incorrectly and had to &lt;a href=""&gt;look that up&lt;/a&gt;. Once I had that in a variable I could map each item in the array to an HTML element.
&lt;/p&gt;
&lt;pre class='stretch stretch--b'&gt;&lt;code class='language-js'&gt;function outputAnswer() {&amp;#x000A;  var times = calculateTime();&amp;#x000A;  var hours = times[0];&amp;#x000A;  var minutes = times[1];&amp;#x000A;  var seconds = times[2];&amp;#x000A;  var hoursOutput = document.querySelector('#hours');&amp;#x000A;  var minutesOutput = document.querySelector('#minutes');&amp;#x000A;  var secondsOutput = document.querySelector('#seconds');&amp;#x000A;  hoursOutput.innerHTML = hours;&amp;#x000A;  minutesOutput.innerHTML = minutes;&amp;#x000A;  secondsOutput.innerHTML = seconds;&amp;#x000A;};&amp;#x000A;&amp;#x000A;outputAnswer();&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class='mtm'&gt;Solution&lt;/h2&gt;
&lt;p&gt;
Here's the pen that I did it in and I used cars instead of trains because I liked the classic car vectors better.
&lt;/p&gt;
&lt;p data-height="265" data-theme-id="0" data-slug-hash="OXaWqP" data-default-tab="js,result" data-user="dandenney" data-embed-version="2" class="codepen"&gt;See the Pen &lt;a href="http://codepen.io/dandenney/pen/OXaWqP/"&gt;Trains&lt;/a&gt; by Dan Denney (&lt;a href="http://codepen.io/dandenney"&gt;@dandenney&lt;/a&gt;) on &lt;a href="http://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async src="//assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;
&lt;h2 class='mtm'&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;
The good part is that this worked! So I know that I can conjure up a problem, find a solution, and work towards building that solution out in code. In applying what I've been learning, this is a big win.
&lt;/p&gt;
&lt;p&gt;
Ultimately, my goal is to learn how to build web apps. In that regard, I know that there's a lot more that could be done to this to make it better. There's likely more efficient ways to write it and to do the conversions. If I was making it editable, I'd have to write code that ensured that 0 or negative values wouldn't break it, etc.
&lt;/p&gt;
&lt;p&gt;
If there's something in here that you know I could do better, please let me know and share it for other folks to learn.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</content>
  </entry>
  <entry>
    <title>Reducing HTML Email Code</title>
    <link rel="alternate" href="http://blog.url.com/posts/front-end-dev/reducing-html-email-code"/>
    <id>http://blog.url.com/posts/front-end-dev/reducing-html-email-code</id>
    <published>2016-07-15T20:00:00-04:00</published>
    <updated>2017-07-01T14:35:59-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;style&gt;
  /* line 1, (__TEMPLATE__) */
  .stretch {
    border: 10px solid #ffffff;
    box-sizing: border-box;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);
    position: relative; }
    @media screen and (min-width: 840px) {
      /* line 1, (__TEMPLATE__) */
      .stretch {
        left: -50px;
        max-width: 800px;
        width: 800px; } }
  
  /* line 12, (__TEMPLATE__) */
  .stretch--a {
    border: 10px solid #f9f9f9; }
  
  /* line 15, (__TEMPLATE__) */
  .stretch--b {
    border: 0;
    box-shadow: none; }
  
  /* line 19, (__TEMPLATE__) */
  table {
    border-collapse: collapse;
    width: 100%; }
  
  /* line 23, (__TEMPLATE__) */
  th {
    background: #f1f1f1;
    border: 1px solid #f1f1f1;
    font-weight: 600;
    padding: 0 4px;
    text-align: left; }
  
  /* line 30, (__TEMPLATE__) */
  td {
    border: 1px solid #f1f1f1;
    padding: 0 4px; }
  
  /* line 34, (__TEMPLATE__) */
  strong {
    font-weight: 600; }
  
  /* line 37, (__TEMPLATE__) */
  pre {
    font-size: 16px; }
  
  @media screen and (max-width: 479px) {
    /* line 41, (__TEMPLATE__) */
    thead {
      display: none; }
  
    /* line 44, (__TEMPLATE__) */
    td {
      display: block; }
      /* line 47, (__TEMPLATE__) */
      td:before {
        content: attr(data-th);
        display: inline-block;
        font-weight: 600;
        width: 50%; } }
&lt;/style&gt;
&lt;p&gt;
I recently came across an article, &lt;a href="https://medium.com/@cloverfounders/the-problem-with-email-newsletters-f606a485ccc1#.56k4k0uh3"&gt;The Problem with Email Newsletters&lt;/a&gt;. I was really curious about the problems that people run into with creating them, but I was surprised by the main problem that this one covered:
&lt;/p&gt;
&lt;div class='stretch stretch--a'&gt;
&lt;blockquote class='tsl'&gt;
"The problem is that 102KB is tiny. An email with a little bit of text and a single photo is larger than 102KB. For Clover, we would need to delete 75% of the content in our current letter in order to squeak in under Gmail’s clipping restrictions."
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;p class='mtm'&gt;
The only time that I could remember running into this problem is when I was doing extreme stuff like converting images into tables filled with colors and creating data visualizations using table colors. I peeked at all of my Code School emails and the largest one I had created was 54kb, so I thought I should take a crack at reducing the code in it.
&lt;/p&gt;
&lt;h2&gt;The Results May Be Misleading&lt;/h2&gt;
&lt;table class='mts'&gt;
&lt;thead&gt;
&lt;th&gt;File&lt;/th&gt;
&lt;th&gt;Expanded&lt;/th&gt;
&lt;th&gt;Minified&lt;/th&gt;
&lt;th&gt;Images&lt;/th&gt;
&lt;th&gt;Total&lt;/th&gt;
&lt;/thead&gt;
&lt;tr&gt;
&lt;td data-th='File'&gt;clover.html&lt;/td&gt;
&lt;td data-th='Expanded'&gt;134kb&lt;/td&gt;
&lt;td data-th='Minified'&gt;74kb&lt;/td&gt;
&lt;td data-th='Images'&gt;436kb&lt;/td&gt;
&lt;td data-th='Total'&gt;570kb&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td data-th='File'&gt;clover-alt.html&lt;/td&gt;
&lt;td data-th='Expanded'&gt;42kb&lt;/td&gt;
&lt;td data-th='Minified'&gt;33kb&lt;/td&gt;
&lt;td data-th='Images'&gt;356kb&lt;/td&gt;
&lt;td data-th='Total'&gt;398kb&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p class='mtm'&gt;
I was able to reduce the amount of code significantly, from 134kb to 42kb by picking through it and &lt;a href="https://imageoptim.com/mac"&gt;ImageOptim&lt;/a&gt; took care of the images. This seems great and like I should just share it with them, right? Not so fast...
&lt;/p&gt;
&lt;h2&gt;The Formula for Redundancy&lt;/h2&gt;
&lt;p&gt;
A template created for general use and a non-developer adding content will almost always result in redundant code. It's probably the most common problem in CMS-driven content because it's so hard to solve. It's the reason we switched to me creating all of the HTML emails that we send at Code School and why the front-end team handles the formatting of all blog posts there as well. I'll break down the good, the "could be better", and the fixes in this particular instance.
&lt;/p&gt;
&lt;h2&gt;The Good&lt;/h2&gt;
&lt;p&gt;
The template is really well done. The code is great and it works well across all screen sizes. They were able to customize it to the look and feel that they wanted and maintain consistency in their data entry, too.
&lt;/p&gt;
&lt;h2&gt;The "Could Be Better"&lt;/h2&gt;
&lt;h4 class='mbf mts'&gt;Some CSS is not being utilized&lt;/h4&gt;
&lt;p class='mtf'&gt;
The template is intended to have content entered using HTML elements for titles and text (H1, H2, H3, H4, H5, p). However, none of that is being used.
&lt;/p&gt;
&lt;h4 class='mbf'&gt;Nesting could be reduced&lt;/h4&gt;
&lt;p class='mtf'&gt;
There are some deeply nested tables that could be moved up a few levels.
&lt;/p&gt;
&lt;h4 class='mbf'&gt;Spongy vs. multiple cell approach&lt;/h4&gt;
&lt;p class='mtf'&gt;
There are a few ways to mark up templates that will work well across multiple resolutions. This one is using the spongy approach, which has code for ghost tables.
&lt;/p&gt;
&lt;h4 class='mbf'&gt;Too many styles are inlined&lt;/h4&gt;
&lt;p class='mtf'&gt;
There is some code that only works in specific clients which could be only in the head. Admittedly, this is tricky depending on what is handling the inlining.
&lt;/p&gt;
&lt;h4 class='mbf'&gt;Style fights&lt;/h4&gt;
&lt;p class='mtf'&gt;
There is code in the template to handle size, colors, etc. for content, but it isn't the desired styles. Each bit of text has styles added to counter the existing ones.
&lt;/p&gt;
&lt;h2&gt;Possible Fixes&lt;/h2&gt;
&lt;p&gt;
I'm going to share what I did to trim things down, but I can't stress enough that this isn't "the way". These could trim things down but ultimately it would be a balance of tailoring the template to the content and ensuring that no extra styles are added each time content is entered. The real fix is process.
&lt;/p&gt;
&lt;h4 class='mbf'&gt;Unutilized CSS&lt;/h4&gt;
&lt;p&gt;
Since the title and paragraph elements aren't beind used, I removed all of the CSS in the template for them. Ultimately the better fix is to use them in content entry but I admit that I don't use them in our emails. Here's a little bit of it:
&lt;/p&gt;
&lt;pre class='stretch stretch--b'&gt;&lt;code class='language-css'&gt;h1 {&amp;#x000A;	color:#000000 !important;&amp;#x000A;	display:block;&amp;#x000A;	font-family:Helvetica;&amp;#x000A;	font-size:60px;&amp;#x000A;	font-style:normal;&amp;#x000A;	font-weight:normal;&amp;#x000A;	line-height:125%;&amp;#x000A;	letter-spacing:normal;&amp;#x000A;	margin:0;&amp;#x000A;	text-align:center; }&amp;#x000A;&amp;#x000A;h2 {&amp;#x000A;	color:#000000 !important;&amp;#x000A;	display:block;&amp;#x000A;	font-family:Helvetica;&amp;#x000A;	font-size:26px;&amp;#x000A;	font-style:normal;&amp;#x000A;	font-weight:normal;&amp;#x000A;	line-height:125%;&amp;#x000A;	letter-spacing:normal;&amp;#x000A;	margin:0;&amp;#x000A;	text-align:center; }&amp;#x000A;&amp;#x000A;h3 {&amp;#x000A;	color:#000000 !important;&amp;#x000A;	display:block;&amp;#x000A;	font-family:Helvetica;&amp;#x000A;	font-size:20px;&amp;#x000A;	font-style:normal;&amp;#x000A;	font-weight:normal;&amp;#x000A;	line-height:125%;&amp;#x000A;	letter-spacing:normal;&amp;#x000A;	margin:0;&amp;#x000A;	text-align:center; }&amp;#x000A;&amp;#x000A;h4 {&amp;#x000A;	color:#000000 !important;&amp;#x000A;	display:block;&amp;#x000A;	font-family:Helvetica;&amp;#x000A;	font-size:16px;&amp;#x000A;	font-style:normal;&amp;#x000A;	font-weight:normal;&amp;#x000A;	line-height:125%;&amp;#x000A;	letter-spacing:normal;&amp;#x000A;	margin:0;&amp;#x000A;	text-align:left; }&amp;#x000A;&amp;#x000A;@media only screen and (max-width: 480px){&amp;#x000A;	h1 {&amp;#x000A;		font-size:24px !important;&amp;#x000A;		line-height:125% !important;&amp;#x000A;	} }&amp;#x000A;&amp;#x000A;@media only screen and (max-width: 480px){&amp;#x000A;	h2 {&amp;#x000A;		font-size:20px !important;&amp;#x000A;		line-height:125% !important;&amp;#x000A;	} }&amp;#x000A;&amp;#x000A;@media only screen and (max-width: 480px){&amp;#x000A;	h3 {&amp;#x000A;		font-size:18px !important;&amp;#x000A;		line-height:125% !important;&amp;#x000A;	} }&amp;#x000A;&amp;#x000A;@media only screen and (max-width: 480px){&amp;#x000A;	h4 {&amp;#x000A;		font-size:16px !important;&amp;#x000A;		line-height:125% !important;&amp;#x000A;	} }&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 class='mbf mtm'&gt;Nesting&lt;/h4&gt;
&lt;p&gt;
To reduce nesting and to divide up the areas that you're editing, I divided the template into 3 sections: header, content, footer.
&lt;/p&gt;
&lt;pre class='stretch stretch--b'&gt;&lt;code class='language-markup'&gt;&amp;lt;!-- HEADER --&amp;gt;&amp;#x000A;&amp;lt;table bgcolor="#ffffff" border="0" cellpadding="0" cellspacing="0" width="100%"&amp;gt;...&amp;#x000A;&amp;#x000A;&amp;lt;!-- CONTENT --&amp;gt;&amp;#x000A;&amp;lt;table bgcolor="#ffffff" border="0" cellpadding="0" cellspacing="0" width="100%"&amp;gt;...&amp;#x000A;&amp;#x000A;&amp;lt;!-- FOOTER --&amp;gt;&amp;#x000A;&amp;lt;table bgcolor="#ffffff" border="0" cellpadding="0" cellspacing="0" width="100%"&amp;gt;...&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 class='mbf mtm'&gt;The multiple cell approach&lt;/h4&gt;
&lt;p&gt;
It's a small amount of code per table, but the combination of saving lines without the ghose tables and reducing nesting helps reduce the overall code.
&lt;/p&gt;
&lt;p class='mbf'&gt;
&lt;strong&gt;Ghost Tables&lt;/strong&gt;
&lt;/p&gt;
&lt;pre class='stretch stretch--b'&gt;&lt;code class='language-markup'&gt;&amp;lt;!--[if mso]&amp;gt;&amp;#x000A;	&amp;lt;table align="left" border="0" cellspacing="0" cellpadding="0" width="100%" style="width:100%;"&amp;gt;&amp;#x000A;		&amp;lt;tr&amp;gt;&amp;#x000A;&amp;lt;![endif]--&amp;gt;&amp;#x000A;&amp;lt;!--[if mso]&amp;gt;&amp;#x000A;	&amp;lt;td valign="top" width="600" style="width:600px;"&amp;gt;&amp;#x000A;&amp;lt;![endif]--&amp;gt;&amp;#x000A;&amp;lt;table style="max-width: 100%;min-width: 100%;border-collapse: collapse;mso-table-lspace: 0pt;mso-table-rspace: 0pt;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;" class="mcnTextContentContainer" align="left" border="0" cellpadding="0" cellspacing="0" width="100%"&amp;gt;&amp;#x000A;	&amp;lt;tbody&amp;gt;&amp;#x000A;		&amp;lt;tr&amp;gt;&amp;#x000A;			&amp;lt;td class="mcnTextContent" style="padding-top: 0;padding-right: 18px;padding-bottom: 9px;padding-left: 18px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;word-break: break-word;color: #000000;font-family: Helvetica;font-size: 15px;line-height: 200%;text-align: left;" valign="top"&amp;gt;&amp;#x000A;				&amp;lt;div style="text-align: center;"&amp;gt;&amp;#x000A;					&amp;lt;span style="font-size:18px; line-height:22px"&amp;gt;&amp;lt;strong&amp;gt;Let’s be real: We know you spent yesterday Amazon Prime-ing your way to happiness. Here’s what you missed while you were trying to score fancy headphones and half-priced Kindles.&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;#x000A;				&amp;lt;/div&amp;gt;&amp;#x000A;			&amp;lt;/td&amp;gt;&amp;#x000A;		&amp;lt;/tr&amp;gt;&amp;#x000A;	&amp;lt;/tbody&amp;gt;&amp;#x000A;&amp;lt;/table&amp;gt;&amp;#x000A;&amp;lt;!--[if mso]&amp;gt;&amp;#x000A;&amp;lt;/td&amp;gt;&amp;#x000A;&amp;lt;![endif]--&amp;gt;&amp;#x000A;&amp;lt;!--[if mso]&amp;gt;&amp;#x000A;	&amp;lt;/tr&amp;gt;&amp;#x000A;&amp;lt;/table&amp;gt;&amp;#x000A;&amp;lt;![endif]--&amp;gt;&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;p class='mbf mtm'&gt;
&lt;strong&gt;Multiple cells&lt;/strong&gt;
&lt;/p&gt;
&lt;pre class='stretch stretch--b'&gt;&lt;code class='language-html'&gt;&amp;lt;!-- Content Container --&amp;gt;&amp;#x000A;&amp;lt;table align="center" border="0" cellpadding="0" cellspacing="0" class="flex-size"&amp;gt;&amp;#x000A;	&amp;lt;tr&amp;gt;&amp;#x000A;		&amp;lt;td style="font-size: 0;"&amp;gt;&amp;nbsp;&amp;lt;/td&amp;gt;&amp;#x000A;		&amp;lt;td width="564"&amp;gt;&amp;#x000A;&amp;#x000A;			&amp;lt;!--- Content Content ---&amp;gt;&amp;#x000A;			&amp;lt;table border="0" cellpadding="0" cellspacing="0" width="100%"&amp;gt;&amp;#x000A;				&amp;lt;tr&amp;gt;&amp;#x000A;					&amp;lt;td class="mcnTextContent" style="color: #000000; font-family: Helvetica; font-size: 18px; line-height: 30px; -ms-text-size-adjust: 100%; text-align: center; word-break: break-word; padding-top: 36px;"&amp;gt;&amp;#x000A;						&amp;lt;strong&amp;gt;Let's be real: We know you spent yesterday Amazon Prime-ing your way to happiness. Here's what you missed while you were trying to score fancy headphones and half-priced Kindles.&amp;lt;/strong&amp;gt;&amp;#x000A;					&amp;lt;/td&amp;gt;&amp;#x000A;				&amp;lt;/tr&amp;gt;&amp;#x000A;			&amp;lt;/table&amp;gt;&amp;#x000A;&amp;#x000A;		&amp;lt;td style="font-size: 0;"&amp;gt;&amp;nbsp;&amp;lt;/td&amp;gt;&amp;#x000A;	&amp;lt;/tr&amp;gt;&amp;#x000A;&amp;lt;/table&amp;gt;&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 class='mbf mtm'&gt;Reducing inlined styles&lt;/h4&gt;
&lt;p&gt;
This is a little challenging if you're using MailChimp templates. You have to add the code to a campaign and turn off their CSS inlining to be sure that these don't get inlined. (Or use another tool like Builder and assign the value to not inline them and then paste into a campaign.)
&lt;/p&gt;
&lt;p&gt;
These two rules are in the code 112 times. The lack of gzip in email clients means that is 111 times too many (but only because these two targeted clients will read from a &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;). For giggles, I saved 111 into a file and it's 7kb. (There's also a "ms" rule but I'm not entirely sure if microsoft phone clients read the &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag.)
&lt;/p&gt;
&lt;pre class='stretch stretch--b'&gt;&lt;code class='language-css'&gt;mso-line-height-rule: exactly;&amp;#x000A;&amp;dash;webkit-text-size-adjust: 100%;&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 class='mbf mtm'&gt;Reducing style fights&lt;/h4&gt;
&lt;p&gt;
While my fixes work in this one-off context, it would require editing the main template and then discussing the process for creating content. The correct styles would need to be in the containing cell and it would need to be clear that styles shouldn't be added via the UI.
&lt;/p&gt;
&lt;p&gt;
In this sample, you can see that the sizes and colors are set in the &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;, but they're being countered by a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;, and a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;.
&lt;/p&gt;
&lt;pre class='stretch stretch--b'&gt;&lt;code class='language-html'&gt;&amp;lt;td class="mcnTextContent" style="padding-top: 0;padding-right: 18px;padding-bottom: 9px;padding-left: 18px;mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;word-break: break-word;color: #000000;font-family: Helvetica;font-size: 11px;line-height: 125%;text-align: center;"&amp;#x000A;valign="top"&amp;gt;&amp;#x000A;	&amp;lt;div style="text-align: left;"&amp;gt;&amp;lt;span style="font-size:18px; line-height:22px"&amp;gt;&amp;lt;strong&amp;gt;Bernie Says He's “Proud To Stand” with Hillary&amp;lt;/strong&amp;gt;&amp;#x000A;		&amp;lt;br&amp;gt;&amp;#x000A;		&amp;lt;br&amp;gt;&amp;#x000A;		Bernie Sanders, progressive millennial hero and America’s favorite grandpa, officially endorsed his longtime frenemy Hillary Clinton. "Let me begin by thanking the 13 million Americans who voted for me during the Democratic primaries," he said, &amp;lt;a href="http://www.cnn.com/2016/07/11/politics/hillary-clinton-bernie-sanders/" target="_blank" style="mso-line-height-rule: exactly;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%;color: #000000;font-weight: bold;text-decoration: none;"&amp;gt;&amp;lt;span style="color:#1cc7f2"&amp;gt;before eventually congratulating Clinton on her victory&amp;lt;/span&amp;gt;&amp;lt;/a&amp;gt;&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;p class='mts'&gt;
Here you can see that the styles to match the desired look are in the &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; and that only specific styles to the link are put on the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;.
&lt;/p&gt;
&lt;pre class='stretch stretch--b'&gt;&lt;code class='language-html'&gt;&amp;lt;td class="mcnTextContent" style="color: #000000; font-family: Helvetica; font-size: 18px; line-height: 22px; -ms-text-size-adjust: 100%; padding-top: 18px; word-break: break-word;"&amp;gt;&amp;#x000A;	Bernie Sanders, progressive millennial hero and America's favorite grandpa, officially endorsed his longtime frenemy Hillary Clinton. "Let me begin by thanking the 13 million Americans who voted for me during the Democratic primaries," he said, &amp;lt;a href="http://www.cnn.com/2016/07/11/politics/hillary-clinton-bernie-sanders/" target="_blank" style="color: #1cc7f2; font-weight: bold; text-decoration: none;"&amp;gt;before eventually congratulating Clinton on her victory&amp;lt;/a&amp;gt;&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class='mtm'&gt;The Comparison&lt;/h2&gt;
&lt;p&gt;
My alternative takes all of these into play and I tried to do them in a way that would be repeatable within the original template and still be edited from the UI. It's not perfect, I seemingly deleted some style that reduces the header text on small screens but I didn't want to track that down. This was more about what would happen if you trimmed code.
&lt;/p&gt;
&lt;p class='mbf'&gt;
&lt;strong&gt;The Original&lt;/strong&gt;
&lt;/p&gt;
&lt;div class='stretch stretch--b'&gt;
&lt;script type="text/javascript" src="https://litmus.com/builder/embed/v1.js" class="builder-embed" data-token="9306f30"&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;p class='mbf'&gt;
&lt;strong&gt;My Alternative&lt;/strong&gt;
&lt;/p&gt;
&lt;div class='stretch stretch--b'&gt;
&lt;script type="text/javascript" src="https://litmus.com/builder/embed/v1.js" class="builder-embed" data-token="b896771"&gt;&lt;/script&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>
