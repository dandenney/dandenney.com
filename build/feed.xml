<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/posts</id>
  <link href="http://blog.url.com/posts"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-06-25T20:00:00-04:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Pursuing a Nanodegree (1 of ?)</title>
    <link rel="alternate" href="http://blog.url.com/posts/front-end/pursuing-a-nanodegree"/>
    <id>http://blog.url.com/posts/front-end/pursuing-a-nanodegree</id>
    <published>2016-06-25T20:00:00-04:00</published>
    <updated>2016-06-26T21:29:01-04:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;style&gt;
  /* line 1, (__TEMPLATE__) */
  .img-stretch {
    border: 10px solid #fff;
    box-sizing: border-box;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);
    position: relative; }
    @media screen and (min-width: 840px) {
      /* line 1, (__TEMPLATE__) */
      .img-stretch {
        left: -50px;
        max-width: 800px; } }
&lt;/style&gt;
&lt;p&gt;
  I've been wanting to learn functional JavaScript for a while. I've stocked up on some books, we've released some great &lt;a href="https://codeschool.com/paths/javascript"&gt;JavaScript courses at Code School&lt;/a&gt;, we have a team account at &lt;a href="https://frontendmasters.com"&gt;Front-end Masters&lt;/a&gt;, and I grabbed Wes Bos' &lt;a href="https://reactforbeginners.com"&gt;React for Beginners&lt;/a&gt;. Basically, I have all the things.
&lt;/p&gt;
&lt;p&gt;
  What I've been missing was the right motivation. Of course being better at it will help some of tasks on our .com, but the impact I'd have is minimal so it hasn't felt pressing. I tried psyching myself up with a 30-day challenge but I'm not one of those folks. I think I made it about 4 days before I went on a random trip and lost momentum. Again, there wasn't a true goal. I'm a firm believe in Chris Coyier's reasoning on when and what to learn: &lt;a href="http://justbuildwebsites.com"&gt;Just Build Websites&lt;/a&gt;.
&lt;/p&gt;
&lt;h2&gt;Inspiration, Courtesy of a Buzzword&lt;/h2&gt;
&lt;p&gt;
  Progressive web apps are so hot right now. I was curious, so I dove into some posts and &lt;a href="https://www.youtube.com/watch?v=cmGr0RszHc8"&gt;Jake Archibald's talk&lt;/a&gt;. I love the ideas behind them and want to take a crack at building one. Somewhere in the mix I ended up on &lt;a href="https://www.udacity.com/course/senior-web-developer-nanodegree--nd802#"&gt;Udacity's Senior Web Developer Nanodgree&lt;/a&gt; and something clicked! They packaged up the motivation that I needed: a clear flow of tasks and interesting projects to build using technologies that I want to learn. Not sure if there's much motivation for me behind the actual nanodegree, but it's a perk. The final selling point was that it's a bit pricey and there's a reward for finishing early. Spending the money will be an extra kick in the ass to make progress.
&lt;/p&gt;
&lt;img class='img-stretch' src='/assets/images/posts/front-end-dev/pursuing-a-nanodegree/syllabus.png' width='800'&gt;
&lt;h2 class='mtm'&gt;Ulterior Motive&lt;/h2&gt;
&lt;p&gt;
  I'm also extremely interested in the teaching format itself. I'm a lifelong learner and I love sharing/teaching. So on top of learning, I'm learning about learning (yo dawg). I've been active in meetups, conferences and workshops and I work for Code School and (really) Pluralsight. The first few years of the explosion of online learning sites have been pretty freeform. We're starting to see multiple approaches into guided learning paths. I get to see a few firsthand, peeked at Treehouse's, and am now giving Udacity's a whirl.
&lt;/p&gt;
&lt;h2&gt;Sharing My Experience&lt;/h2&gt;
&lt;p&gt;
  So, I'll be sharing my experience as I go. This will be a series of posts as I take on each section. I'll be sharing what I'm learning as well as my take on the nanodegree program itself.
&lt;/p&gt;
&lt;h2&gt;Onboarding&lt;/h2&gt;
&lt;p&gt;
  The onboarding flow was really well done. The folks at &lt;a href="http://focuslabllc.com/"&gt;Focus Lab&lt;/a&gt; recently overhauled Udacity and they did an awesome job. The intro video was very human and there were a series of videos and modals explaining the benefits of the process as well as what you'll be learning.
&lt;/p&gt;
&lt;img class='img-stretch' src='/assets/images/posts/front-end-dev/pursuing-a-nanodegree/video.png' width='800'&gt;
&lt;p class='mtm'&gt;
  I took some quick notes along the way:
&lt;/p&gt;
&lt;ul class='list-bulleted'&gt;
  &lt;li&gt;Gorgeous payment form, very human (optional) video&lt;/li&gt;
  &lt;li&gt;The features modal had key points but wasn’t necessary for me&lt;/li&gt;
  &lt;li&gt;The Syllabus has a well-done intro video (ugh, they say learning by doing in the course intro video)&lt;/li&gt;
  &lt;li&gt;They mix video with on-page content which is an awesome experience. (A couple small things are out of sync, I imagine that's a challenge when updating.)&lt;/li&gt;
  &lt;li&gt;You're strongly encouraged to setup a profile (which I'd usually skip) but the flow was great and it seems important for feedback on progress&lt;/li&gt;
  &lt;li&gt;There's a community for students in a forum and Slack&lt;/li&gt;
  &lt;li&gt;Honor Code is an excellent idea, they talk through the importance of doing this to learn, not just to earn the nanodegree.&lt;/li&gt;
  &lt;li&gt;"Be relentless in finding an answer on your own" was my favorite line in the explanation of how important it is for you to be learning, not just progressing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  My take at the end of the introductory session: I’m loving this, the videos are well done and lead off with a critical thinking exercise. That solidified things for me because it means they're walking the walk. I'm all in.
&lt;/p&gt;
&lt;h2&gt;Project 1: Meet-up Event Planner&lt;/h2&gt;
&lt;p&gt;
  The goal of this will be to create a small app that allows somoene to create an event, using some cool tech. This was super interesting to me since I do so many events and because I can see how the functionality can be used in many other ways. Since it's form-based, you start off learning about best practices for building forms. Cameron Pittman and Ido Green lead the way, with visits from the guy who literally wrote the &lt;a href="http://www.lukew.com/resources/web_form_design.asp"&gt;book on forms&lt;/a&gt;, Luke Wroblewski.
&lt;/p&gt;
&lt;img class='img-stretch' src='/assets/images/posts/front-end-dev/pursuing-a-nanodegree/cameron-ido.jpg' width='800'&gt;
&lt;p class='mtm'&gt;
  The challenges are integrated well within the video space: you watch a bit, then answer a question or do a little bit of code in that same space. I was pretty used to this and it works well, but they took it to another level. The initial project is doing form validation with &lt;code&gt;setCustomValidity&lt;/code&gt; and they built a Chrome extension that runs tests on your code. Here's my first run:
&lt;/p&gt;
&lt;img class='img-stretch mbm' src='/assets/images/posts/front-end-dev/pursuing-a-nanodegree/extension.png' width='800'&gt;
&lt;p&gt;
  Again, I took some notes along the way:
&lt;/p&gt;
&lt;ul class='list-bulleted'&gt;
  &lt;li&gt;Quiz: Validate Some Inputs, things ramp up fast here. Having never done any regex for validations, I need to learn how to check for letter grades allowing punctuation (A, A+, A-, etc.). I got close, but Cameron's example was way better because I wasn't proofing for no marks on F.&lt;/li&gt;
  &lt;li&gt;Had to install, learn to run Grunt for the local quiz on customValidity (based on forum suggestions). Kinda weird to do this before the next section on tooling, though arguably I could have run it in Middleman if I wanted to.&lt;/li&gt;
  &lt;li&gt;I went down a dark hole of git commits trying to not commit the local node-modules, but that was a misstep on my part. I was so focused on the challenge that I accidentally committed it all.&lt;/li&gt;
  &lt;li&gt;Had to learn the syntax for using regex to validate an input’s value, aka .test() &lt;a href="http://stackoverflow.com/questions/6603015/check-whether-a-string-matches-a-regex"&gt;Stack Overflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;By the time I was really ready, I was so close! I was missing one small thing: needing to set the nil validity for the second input and one big thing: needing to concatenate all of the errors into one message.&lt;/li&gt;
  &lt;li&gt;The array idea from the forums was awesome and I know there’s a much better way to write what I did, but I got it working.&lt;/li&gt;
  &lt;li&gt;Absolutely loved Luke’s breakdown of The Culture of Delivery.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Things I need to learn from the solution code:&lt;/h3&gt;
&lt;ul class='list-bulleted mtm'&gt;
  &lt;li&gt;.prototype&lt;/li&gt;
  &lt;li&gt;switch functions&lt;/li&gt;
  &lt;li&gt;defining functions in prototype and invoking them in another function (this is what I was trying to do with my initial individual pushes, but didn’t nail the syntax)&lt;/li&gt;
  &lt;li&gt;The function for capturing the illegal character that was used and displaying it. I’m glad I thought of it, but should have fought through an attempt to make it happen.&lt;/li&gt;
  &lt;li&gt;Efficient logic (his code only runs when the 2 passwords match, while mine runs regardless)&lt;/li&gt;
  &lt;li&gt;\n&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
  That's it for the first section. I'm hooked now and this felt so good:
&lt;/p&gt;
&lt;img class='img-stretch mbm' src='/assets/images/posts/front-end-dev/pursuing-a-nanodegree/success-form.png' width='800'&gt;
</content>
  </entry>
  <entry>
    <title>TIL Executing Local Ruby</title>
    <link rel="alternate" href="http://blog.url.com/posts/front-end-dev/til-executing-local-ruby"/>
    <id>http://blog.url.com/posts/front-end-dev/til-executing-local-ruby</id>
    <published>2015-11-19T19:00:00-05:00</published>
    <updated>2016-03-03T16:51:56-05:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p class='tss'&gt;
  IA Writer says this is a 5:47 minute read and Hemingway App says I'm ugly and I can't write good. Read at your own peril.
&lt;/p&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;
  I needed to do something unusual: take one big email list and remove any emails that exist in it from a smaller email list. At Code School, we use MailChimp so I started by finding out if they had a way to do it. They do, but for business purposes (security and expenses) I wanted to handle this offline if possible. I have 2 CSVs and I need one that is effectively one.csv minus two.csv.
&lt;/p&gt;
&lt;h2&gt;A Job Made for Computers&lt;/h2&gt;
&lt;p&gt;
  The big list is ~1.5m and the little list is around 80k, so throwing them into Numbers and sorting/removing was clearly out of the question. So I bugged &lt;a href="http://drewbarontini.com"&gt;Drew&lt;/a&gt;, our resident efficiency expert. His eyes lit up at the challenge and about 5 minutes later he had a proof of concept working in Terminal. This guy.
&lt;/p&gt;
&lt;h2&gt;The Solution (Thought)&lt;/h2&gt;
&lt;p&gt;
  I am not a programmer and I have never done any official training in programming. The hard part for me initially is thinking through how something would work and how I would communicate that to the computer. So I thought I’d share a roundabout way of thinking through this one.
&lt;/p&gt;
&lt;p&gt;
  If I had to do this manually, here’s a guess on how I’d do it.
&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    Make a copy of the large list (to be edited).
  &lt;/li&gt;
  &lt;li&gt;
    Open each CSV in an app and sort alphabetically by email name.
  &lt;/li&gt;
  &lt;li&gt;
    Check each email in the small list by looking at the large list to see if it exists.
  &lt;/li&gt;
  &lt;li&gt;
    If it does exist in the large list, delete it.
  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
  Just for giggles, if I got in a groove and averaged 10 seconds per entry, that’d be around 800,000 seconds or 13,333 minutes, or 222 hours or 5–6 weeks of full-time work (without overtime). It’s a job for computers, but the important thing is knowing how to make the computer think the way that you want it to.
&lt;/p&gt;
&lt;h2&gt;Ruby to the Rescue&lt;/h2&gt;
&lt;p&gt;
  Drew knew right away that Ruby could handle this very well. (If you’re one of &lt;em&gt;those&lt;/em&gt; people and you’ve actually made it this far in the article, yes &lt;em&gt;x&lt;/em&gt; language can also do this very well. I just saved you a Medium post. :troll:) So let’s talk through how this would happen. Ruby would do things &lt;em&gt;pretty close&lt;/em&gt; to our list, but in a different order.
&lt;/p&gt;
&lt;p&gt;
  It is very fast when working with arrays, which are basically a comma-separated list of items wrapped in [ ]. This is super close to what our CSV looks like and there are functions for working with arrays built into Ruby.
&lt;/p&gt;
&lt;p&gt;
  Here’s my loose interpretation of how Ruby will approach it (once you write the code).
&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    Load each CSV into an array (big, little)
  &lt;/li&gt;
  &lt;li&gt;
    Create a new array (lessbig)
  &lt;/li&gt;
  &lt;li&gt;
    Compare the two original arrays and write only the emails that exist solely in the first array (big) into the new array (lessbig)
  &lt;/li&gt;
  &lt;li&gt;
    Create a CSV from the newly created array
  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
  It’s pretty close to the way we would do it except for the order and that it takes about &lt;em&gt;1–2 minutes&lt;/em&gt; to run.
&lt;/p&gt;
&lt;h2&gt;I Wanted to Try!&lt;/h2&gt;
&lt;p&gt;
  I had no idea where to even start with this (even after seeing Drew run it in Terminal in IRB). So over lunch I stole a couple of hints (make a file, run it with “x”). It was a few days after that when I started on it and I couldn’t remember the details but our community puts our wealth of knowledge in things like Stack Overflow, &lt;a href="http://stackoverflow.com/questions/8721369/how-to-execute-a-ruby-script-in-terminal"&gt;so I found that pretty quickly&lt;/a&gt;. You make a &lt;code&gt;.rb&lt;/code&gt; or &lt;code&gt;.irb&lt;/code&gt; file, then in terminal you type &lt;code&gt;ruby filename.rb&lt;/code&gt;. This works for what I need to do as the end goal is a CSV. (There are ways that you can print out the results in Terminal if you don’t need a file.)
&lt;/p&gt;
&lt;p&gt;
  &lt;a href="http://stackoverflow.com/questions/20205023/ruby-find-element-not-in-common-for-two-arrays"&gt;Comparing the arrays&lt;/a&gt; and creating CSVs are also on Stack Overflow, but I mostly used the &lt;a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/csv/rdoc/CSV.html#method-i-read"&gt;docs&lt;/a&gt; for the CSV part.
&lt;/p&gt;
&lt;h2&gt;I Got Close&lt;/h2&gt;
&lt;p&gt;
  Ok, with my memory of what Drew had created and some Stack Overflow I was able to get my own POC working locally. My mind was seriously blown! A few lines of code and I had a new file with exactly what I wanted. It was insane to type that in and see a new file pop into finder.
&lt;/p&gt;
&lt;pre&gt;&lt;code class='language-ruby'&gt;# Tell Ruby to use its CSV library of functions
require &amp;quot;csv&amp;quot;

# Create an array from big values
big = [&amp;quot;one@email.com&amp;quot;, &amp;quot;two@email.com&amp;quot;, &amp;quot;three@email.com&amp;quot;, &amp;quot;four@email.com&amp;quot;, &amp;quot;five@email.com&amp;quot;]

# Create an array from little values
little = [&amp;quot;four@email.com&amp;quot;, &amp;quot;five@email.com&amp;quot;, &amp;quot;six@email.com&amp;quot;, &amp;quot;seven@email.com&amp;quot;, &amp;quot;eight@email.com&amp;quot;]

# Remove any entries in little from big and make a new array with the result
lessbig = big - little

# Create a CSV from the new array
CSV.open(&amp;quot;lessbig.csv&amp;quot;, &amp;quot;wb&amp;quot;) do |row|
  lessbig.each do |data|
    row &amp;lt;&amp;lt; [data]
  end
end

CSV.open(&amp;quot;lessbig.csv&amp;quot;, &amp;quot;wb&amp;quot;) do |csv|
  csv &amp;lt;&amp;lt; lessbig
end&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class='mtm'&gt;WTF&lt;/h2&gt;
&lt;p&gt;
  When I switched to using CSVs, things were formatted differently (an array of arrays). I fought through by throwing some of the various options from the doc into the code but nothing worked. So I used a lifeline and asked to see Drew’s example.
&lt;/p&gt;
&lt;h2&gt;Drewwwwww&lt;/h2&gt;
&lt;p&gt;
  There were 2 problems that he had figured out. You need to use an each loop and output each row and you need the CSV to be multi-line for the way that we were writing.
&lt;/p&gt;
&lt;p&gt;
  Then there’s the part where he actually organized it like a developer. You can see his &lt;a href="https://github.com/drewbarontini/splitter"&gt;splitter&lt;/a&gt; on GitHub.
&lt;/p&gt;
&lt;h2&gt;Frankencode&lt;/h2&gt;
&lt;p&gt;
  While his example is what someone would probably want to ship, I wanted to get it working in something more basic. So, I took his loops and tweaked them into my code. It was still borked, so I formatted my CSVs to be multi-line and Boom!
&lt;/p&gt;
&lt;pre&gt;&lt;code class='language-ruby'&gt;# Tell Ruby to use its CSV library of functions
require &amp;quot;csv&amp;quot;

# Create an array from big.csv
big = []
CSV.foreach(&amp;quot;big.csv&amp;quot;) do |row|
  big &amp;lt;&amp;lt; row[0]
end

# Create an array from little.csv
little = []
CSV.foreach(&amp;quot;little.csv&amp;quot;) do |row|
  little &amp;lt;&amp;lt; row[0]
end

# Remove any entries in little from big and make a new array with the result
lessbig = big - little

# Create a CSV from the new array
CSV.open(&amp;quot;lessbig.csv&amp;quot;, &amp;quot;wb&amp;quot;) do |row|
  lessbig.each do |data|
    row &amp;lt;&amp;lt; [data]
  end
end&lt;/code&gt;&lt;/pre&gt;
&lt;h2 class='mtm'&gt;WTF Aside&lt;/h2&gt;
&lt;p&gt;
  Soooooo I had opened and cleaned up unnecessary data from the CSVs using Numbers. It turns out Numbers has a max of 65535 rows so now both of my CSVs were that many rows long. &lt;strong&gt;Don’t do that&lt;/strong&gt;. In this case, it turned out to be unnecessary anyways because Drew’s loops only take from the single email column and only output one column of emails. Him and his efficiency. :eyeroll:
&lt;/p&gt;
&lt;h2&gt;My Takeaways&lt;/h2&gt;
&lt;p&gt;
  As with most things in web development, executing Ruby functions locally was extremely intimidating before I tried it. Admittedly, I wouldn’t have gotten anywhere by just reading docs and stumbling along. Having that tiny kickstart of seeing it run locally in Terminal got me rolling, but that’s what peers are for! I won’t be diving into writing Ruby on the reg, but I’m no longer afraid of it and I’ll know it’s a viable option when I need to do something requiring lots of processing.
&lt;/p&gt;
&lt;p&gt;
  Time can be a concern, of course. This example was lucky in that it saved ~$900 to $1000 dollars by being done offline. I wouldn’t be able to justify this for everything that came up, but we are strongly encouraged to find creative solutions and learn as necessary to improve our skills. Hopefully good examples of this in the wild can lead to every company/team encouraging that.
&lt;/p&gt;
&lt;p&gt;
  Finding a solution, understanding it, and working with my teammate on it was a blast. Look for these opportunities and take advantage of them when you can. Then, share what you learned.
&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Email Design Conference 2015</title>
    <link rel="alternate" href="http://blog.url.com/posts/conferences/tedc-15-boston"/>
    <id>http://blog.url.com/posts/conferences/tedc-15-boston</id>
    <published>2015-08-28T20:00:00-04:00</published>
    <updated>2016-03-03T16:52:01-05:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class='row'&gt;
  &lt;div class='well'&gt;
    &lt;svg id="Layer_1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 577.3 38.5"&gt;&lt;style&gt;.st0{fill:#535453;} .st1{font-family:&amp;apos;Gibson-SemiBold&amp;apos;;} .st2{font-size:36.5918px;}&lt;/style&gt;&lt;text transform="translate(0 30.92)" class="st0 st1 st2"&gt;The Email Design Conference 2015&lt;/text&gt;&lt;/svg&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class='cell cell--s'&gt;
  &lt;div class='video-wrapper'&gt;
    &lt;iframe src="https://player.vimeo.com/video/137720165?color=b51f24&amp;byline=0" width="700" height="394" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
  &lt;/div&gt;
  &lt;p class='mtm'&gt;
    I'm headed home from an amazing time at this year's
    &lt;a href="https://litmus.com/conference/boston"&gt;Email Design Conference in Boston&lt;/a&gt;, organized by the wonderful people at &lt;a href="https://litmus.com"&gt;Litmus&lt;/a&gt;.
  &lt;/p&gt;
  &lt;p&gt;
    Having heard so many great things about the event, I had high hopes that were blown away. The Litmus team puts so much love and attention into the organization and details, making it feel both professional and personal all at once. I'm not sure of the final count but I'd guess there was between 400-500 people overall, but it felt completely welcoming and friendly. There was a lot going on with 2 tracks and some additional events, but you always knew where and when everything was because they made sure you could get the schedule in 4-5 ways at any time.
  &lt;/p&gt;
  &lt;h2&gt;Presentations&lt;/h2&gt;
  &lt;p&gt;
    There was a lot of thought and planning put into the chosen presentations and their order/pairing in the tracks. There was a wealth of knowledge shared and a great balance between what should be divided into breakout sessions and what everyone should be together for. I met a lot of people who's mind were blown with all of the information that they learned.
  &lt;/p&gt;
  &lt;h2&gt;Emphasis on Community&lt;/h2&gt;
  &lt;p&gt;
    While most conferences are filled with information, this one is special in that they found ways to ensure that we were talking to each other. There were plenty of breaks allowing time for meeting people, but the addition of the group discussions during the workshops and the “email speed dating” sessions made it very comfortable for people to talk with speakers. I met a ton of nice people with interesting backgrounds and issues in building emails. The talks were awesome, but this was my favorite part.
  &lt;/p&gt;
  &lt;h2&gt;Thank You to Litmus&lt;/h2&gt;
  &lt;p&gt;
    I want to say a giant THANK YOU to Litmus not only for putting this event together, but for letting me be a part of it. I was honored to get to share some of my email experience and the speed dating sessions let me really talk through some things with people for when they get back to work. I hope everyone takes me up on my offer to ping me with their templates so we can chat about setting up snippets.
  &lt;/p&gt;
  &lt;h2&gt;Thank you to everyone&lt;/h2&gt;
  &lt;p&gt;
    THANK YOU to all of the attendees and speakers for making this a special event. I hope to keep in touch and see everyone next year!
  &lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Front-End Conf Lives!</title>
    <link rel="alternate" href="http://blog.url.com/posts/conferences/front-end-conf-lives"/>
    <id>http://blog.url.com/posts/conferences/front-end-conf-lives</id>
    <published>2014-10-22T20:00:00-04:00</published>
    <updated>2016-03-03T16:52:01-05:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;style&gt;
  h1, h2, h3, h4 { color: #b51f24; }
&lt;/style&gt;
&lt;p class='center'&gt;
  &lt;img class='db mhc' src='/assets/images/posts/conferences/front-end-conf-lives/plan-comes-together.jpg' width='400'&gt;
&lt;/p&gt;
&lt;p&gt;
  The decision to stop running Front-End Conf was a very tough one and the reaction of the people both in St. Petersburg and Portland made it even more hard. Luckily, I knew it was going to be tough and I decided to call out a few of my friends. The awesome crew from &lt;a href='http://unmatchedstyle.com/'&gt;Unmatched Style&lt;/a&gt;, who run &lt;a href='http://convergese.com/'&gt;ConvergeSE&lt;/a&gt;, &lt;a href='http://convergefl.com/'&gt;ConvergeFL&lt;/a&gt;, &lt;a href='http://convergerva.com/'&gt;ConvergeRVA&lt;/a&gt;, and the &lt;a href='https://bdconf.com/'&gt;Breaking Development confs&lt;/a&gt; (amongst other things) came up on stage to give me a gift. I returned the favor by calling them out on the possibility of running a conf in St. Pete because that's the kind of thing friends can get away with. We've been chatting since and they're officially taking over!
&lt;/p&gt;
&lt;p class='center'&gt;
  &lt;img src='/assets/images/posts/conferences/front-end-conf-lives/converge-crew.jpg' width='100%'&gt;
&lt;/p&gt;
&lt;h2&gt;The Best Possible Outcome&lt;/h2&gt;
&lt;p&gt;
  Front-End Conf will continue on and will be in St. Petersburg in 2015! They will be handling all of the logistics and running the conf, which is the part Cherrie and I were struggling to keep up with. They're pros and I've learned so much from them as we've been sharing our conf running experiences over the past 6 years. (We missed each other's first confs, but I've traveled up for every ConvergeSE since 2010 and they've come down to St. Pete for every one since then as well.) The best part is that they still want us to be involved! So, we'll be helping out in every way that we can to work on the conf with friends to continue celebrating with this awesome community.
&lt;/p&gt;
&lt;h2&gt;Stay in the loop!&lt;/h2&gt;
&lt;p&gt;
  We have a &lt;a href='http://frontendconf.com'&gt;new landing page&lt;/a&gt; whipped up by the team, with some of Giovanni's awesome artistry. Be sure to sign up for updates for when we have details...
&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Give Back</title>
    <link rel="alternate" href="http://blog.url.com/posts/general/give-back"/>
    <id>http://blog.url.com/posts/general/give-back</id>
    <published>2014-10-06T20:00:00-04:00</published>
    <updated>2016-03-03T16:52:01-05:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p class='center'&gt;
  &lt;img class="mhc" width="640" height="640" src="assets/images/posts/general/give-back/give-back.jpg" /&gt;
  &lt;br&gt;
  &lt;small&gt;Two of my favorite people &lt;a href="https://twitter.com/carlsmith"&gt;Carl Smith&lt;/a&gt; and &lt;a href="https://twitter.com/andigrahambsd"&gt;Andi Graham&lt;/a&gt;, who are always giving back to the community.&lt;/small&gt;
&lt;/p&gt;
&lt;p&gt;
  Some wonderful got together and made us an &lt;a href="http://frontendthanks.com"&gt;awesome site&lt;/a&gt; and printed off t-shirts. Thank you again to everyone involved and specifically to &lt;a href="https://twitter.com/michigangraham"&gt;Matt Graham&lt;/a&gt; and &lt;a href="https://twitter.com/bencallahan"&gt;Ben Callahan&lt;/a&gt; for heading things up. They also donated the proceeds from Cotton Bureau to us. Needless to say, we never planned on pocketing that.
&lt;/p&gt;
&lt;h2 class='mbf'&gt;Giving It Back&lt;/h2&gt;
&lt;p&gt;
  There's an awesome opportunity to give back in a couple of ways. We really want this project to get funded: &lt;a href="https://www.indiegogo.com/projects/code-debugging-the-gender-gap"&gt;CODE: Debugging the Gender Gap&lt;/a&gt;. Additionally, one of the rewards gets someone 6 months of &lt;a href="http:codeschool.com"&gt;Code School&lt;/a&gt;. I love working there and the idea of someone getting 6 months to increase their skills.
&lt;/p&gt;
&lt;p&gt;
  So, we bought 2 of the $100 levels where someone gets the Code School reward and I want to give the rewards away.
&lt;/p&gt;
&lt;h2 class='mbf'&gt;We Need Your Help&lt;/h2&gt;
&lt;h5 class='mbf'&gt;Step one:&lt;/h5&gt;
&lt;p class='mtf'&gt;
  We need to know who to give these 2 rewards to. Are you in a point in your career where this could really make a difference? Or, do you know someone that it could really make a difference to? Pop your or their name in the form below and I'll do a random draw on Friday (October 10th).
&lt;/p&gt;
&lt;h5 class='mbf'&gt;Step two:&lt;/h5&gt;
&lt;p class='mtf mbl'&gt;
  &lt;a href="https://www.indiegogo.com/projects/code-debugging-the-gender-gap"&gt;Share the project!&lt;/a&gt; It has 4 days left and only needs $1,750 (at this moment).
&lt;/p&gt;
&lt;h4&gt;Congratulations to Fasina and Ryan, our winners!&lt;/h4&gt;
</content>
  </entry>
  <entry>
    <title>Experiment - Personal JSON-based API</title>
    <link rel="alternate" href="http://blog.url.com/posts/front-end-dev/experiment-personal-json-based-api"/>
    <id>http://blog.url.com/posts/front-end-dev/experiment-personal-json-based-api</id>
    <published>2014-08-29T20:00:00-04:00</published>
    <updated>2016-03-03T16:52:01-05:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;
  The most important thing that I can say right now is that this is an experiment. I am sharing as I learn, so please don't consider this a tutorial. I prefer to share as I bumble through things because it might help other people in the same spot and experts usually offer good tips for improving.
&lt;/p&gt;
&lt;h2&gt;Why I am doing this&lt;/h2&gt;
&lt;p&gt;
  I've been a fan of data since I was young. In my teens, I used newspapers to track stocks to see what would happen if I day traded with $100k. Later, I moved to watching patterns in dog racing results and started betting them occasionally. I got distracted from this stuff for a while, but data visualization on the web is exploding and the
  &lt;a href='http://en.wikipedia.org/wiki/Quantified_Self'&gt;quantified self&lt;/a&gt;
  movement is intriguing. There are great tools for collecting and displaying data and I want to learn.
&lt;/p&gt;
&lt;h2&gt;Big goals, small steps&lt;/h2&gt;
&lt;p&gt;
  Sites like
  &lt;a href='http://aprilzero.com'&gt;AprilZero.com&lt;/a&gt;
  and
  &lt;a href='http://feltron.com'&gt;Feltron.com&lt;/a&gt;
  are my inspiration. To achieve things like they have, I'll need a database, third-party APIs, and top-notch skills in data visualization. While those are the goals, I'm starting very simply and learning. That way when I'm done, I can go full Drake and be all like "started from the bottom now I'm here".
&lt;/p&gt;
&lt;h2&gt;Step One: Store Data as JSON&lt;/h2&gt;
&lt;p&gt;
  I knew that I wanted to use
  &lt;a href='https://www.firebase.com'&gt;Firebase&lt;/a&gt;
  to get started. I've been fascinated with the power that it offers for someone like me who has no experience with back-end development. It can be used to store and access data in real-time and their docs are fantastic.
&lt;/p&gt;
&lt;p&gt;
  Knowing that this will be a work in progress, I didn't spend much time planning out data. I know there were a few things that I would want to be able to display on the site, so I created a small JSON file with them.
&lt;/p&gt;
&lt;pre&gt;&lt;code class='language-javascript'&gt;{&amp;#x000A;  "personal" : {&amp;#x000A;    "firstName" : "Dan",&amp;#x000A;    "lastName" : "Denney",&amp;#x000A;    "dob" : "12/26/77"&amp;#x000A;  },&amp;#x000A;  "work" : {&amp;#x000A;    "workTitle" : "Front-End Dev",&amp;#x000A;    "workCompany" : "Code School"&amp;#x000A;  },&amp;#x000A;  "social" : {&amp;#x000A;    "website" : "dandenney.com",&amp;#x000A;    "twitter" : "dandenney",&amp;#x000A;    "codepen" : "dandenney",&amp;#x000A;    "github" : "dandenney",&amp;#x000A;    "gplus" : "+DanDenneydd"&amp;#x000A;  }&amp;#x000A;}&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Importing that to Firebase, I get a structure that looks like this. (The recentFinds came later, but I'll explain that next.)
&lt;/p&gt;
&lt;figure&gt;
  &lt;img src='/assets/images/posts/front-end-dev/experiment-personal-json-api/screenshot-json.png'&gt;
&lt;/figure&gt;
&lt;h2&gt;Step Two: Write to the JSON&lt;/h2&gt;
&lt;p&gt;
  The prior stuff was static (borinnnggg). What I'm interested in is writing to the JSON. A simple example seemed to be to list awesome things I've found on the web recently. So, I created a recentFinds object.
&lt;/p&gt;
&lt;p&gt;
  One important thing to share is that I don't know how to structure JSON manually by memory, so I use this &lt;a href="http://jsonformatter.curiousconcept.com"&gt;JSON Formatter&lt;/a&gt;.
&lt;/p&gt;
&lt;pre&gt;&lt;code class='language-javascript'&gt;{&amp;#x000A;  "personal" : {&amp;#x000A;    "firstName" : "Dan",&amp;#x000A;    "lastName" : "Denney",&amp;#x000A;    "dob" : "12/26/77"&amp;#x000A;  },&amp;#x000A;  "work" : {&amp;#x000A;    "workTitle" : "Front-End Dev",&amp;#x000A;    "workCompany" : "Code School"&amp;#x000A;  },&amp;#x000A;  "social" : {&amp;#x000A;    "website" : "dandenney.com",&amp;#x000A;    "twitter" : "dandenney",&amp;#x000A;    "codepen" : "dandenney",&amp;#x000A;    "github" : "dandenney",&amp;#x000A;    "gplus" : "+DanDenneydd"&amp;#x000A;  },&amp;#x000A;  "recentFinds" : [&amp;#x000A;    {&amp;#x000A;      "title" : "perfBar",&amp;#x000A;      "url" : "http://lafikl.github.io/perfBar",&amp;#x000A;      "description" : "Simple way to collect and look at your website performance metrics quickly"&amp;#x000A;    }&amp;#x000A;  ]&amp;#x000A;}&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  This is a static example, but it's only to get the structure into Firebase in the way that I want it. I don't understand their UI for creating JSON structures, so it's way easier to write what I want and import it.
&lt;/p&gt;
&lt;p&gt;
  The Firebase JS is 28k and has functions that allow accessing and updating data. The following code is a combo of Firebase code and some quick and dirty Coffeescript that I made as a proof of concept.
&lt;/p&gt;
&lt;pre&gt;&lt;code class='language-javascript'&gt;# Create a global recentFinds reference&amp;#x000A;recentFindsref = new Firebase("https://dandenney.firebaseio.com/recentFinds")&amp;#x000A;&amp;#x000A;# Send recentFind data to Firebase on click of #findSubmit&amp;#x000A;$("#findSubmit").click -&gt;&amp;#x000A;&amp;#x000A;  # Get the data from the inputs&amp;#x000A;  findTitle = $("#findTitle").val()&amp;#x000A;  findUrl = $("#findUrl").val()&amp;#x000A;  findDescription = $("#findDescription").val()&amp;#x000A;&amp;#x000A;  # Update the recent finds list&amp;#x000A;  recentFindsref.push({&amp;#x000A;    title: findTitle&amp;#x000A;    url: findUrl&amp;#x000A;    description: findDescription&amp;#x000A;  })&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  I actually started by sending static information to make sure that
  &lt;code&gt;recentFindsref.push&lt;/code&gt;
  worked, but the goal was to be able to send info from a form. I strayed with the event trigger because using a submit input or button causes a page refresh that I don't want.
&lt;/p&gt;
&lt;pre&gt;&lt;code class='language-markup'&gt;&amp;lt;form&amp;gt;
  &amp;lt;fieldset&amp;gt;
    &amp;lt;label for=&amp;quot;findTitle&amp;quot;&amp;gt;Title&amp;lt;/label&amp;gt;
    &amp;lt;input id=&amp;quot;findTitle&amp;quot; name=&amp;quot;findTitle&amp;quot; type=&amp;quot;text&amp;quot; /&amp;gt;
  &amp;lt;/fieldset&amp;gt;
  &amp;lt;fieldset&amp;gt;
    &amp;lt;label for=&amp;quot;findName&amp;quot;&amp;gt;URL&amp;lt;/label&amp;gt;
    &amp;lt;input id=&amp;quot;findUrl&amp;quot; name=&amp;quot;findUrl&amp;quot; type=&amp;quot;text&amp;quot; /&amp;gt;
  &amp;lt;/fieldset&amp;gt;
  &amp;lt;fieldset&amp;gt;
    &amp;lt;label for=&amp;quot;findDescription&amp;quot;&amp;gt;Description&amp;lt;/label&amp;gt;
    &amp;lt;input id=&amp;quot;findDescription&amp;quot; name=&amp;quot;findDescription&amp;quot; type=&amp;quot;text&amp;quot; /&amp;gt;
  &amp;lt;/fieldset&amp;gt;
  &amp;lt;p id=&amp;quot;findSubmit&amp;quot; name=&amp;quot;findSubmit&amp;quot;&amp;gt;Add&amp;lt;/p&amp;gt;
&amp;lt;/form&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Testing this out with a few entries shows that the data is being saved to my JSON and Firebase is assigning a unique ID for each one as well.
&lt;/p&gt;
&lt;figure&gt;
  &lt;img src='/assets/images/posts/front-end-dev/experiment-personal-json-api/screenshot-recentfinds.png'&gt;
&lt;/figure&gt;
&lt;h2&gt;Step Three: Read from the JSON&lt;/h2&gt;
&lt;p&gt;
  At this point, I had data stored in JSON and the ability to add more data to it. I wanted to be sure that I could then access and display that data in order to know that I would be able to use this in the way that I want to.
&lt;/p&gt;
&lt;pre&gt;&lt;code class='language-markup'&gt;&amp;lt;ul id=&amp;quot;recentFinds&amp;quot;&amp;gt;
  &amp;lt;!-- Firebase data from https://dandenney.firebaseio.com/recentFinds --&amp;gt;
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class='language-javascript'&gt;# Retrieve recentFind data from Firebase on page document ready
$ -&amp;gt;
  recentFindsref.on 'child_added', (snapshot) -&amp;gt;
    url = snapshot.val().url
    title = snapshot.val().title
    description = snapshot.val().description

    # Append an li to the ul#recentFinds for each item in recentFinds
    $(&amp;quot;#recentFinds&amp;quot;).append(
      &amp;quot;&amp;lt;li&amp;gt;&amp;quot; + &amp;quot;&amp;lt;h3&amp;gt;&amp;quot; +  &amp;quot;&amp;lt;a href='&amp;quot; + url + &amp;quot;'&amp;gt;&amp;quot; + title + &amp;quot;&amp;lt;/a&amp;gt;&amp;quot; + &amp;quot;&amp;lt;/h3&amp;gt;&amp;quot; + &amp;quot;&amp;lt;p&amp;gt;&amp;quot; + description + &amp;quot;&amp;lt;/p&amp;gt;&amp;quot; +&amp;quot;&amp;lt;/li&amp;gt;&amp;quot;
    )&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;It Works!&lt;/h2&gt;
&lt;p&gt;
  So here's a GIF of it in action. Pardon the fact that it's hideous, this was quick experimentation so I had no concern about aesthetics or usability yet. The awesome thing about Firebase is that it's realtime. Nothing I ever record will ever deserve that amount of speed, but it's nice to have. You'll see in the GIF how fast it is. This example is sending the data to Firebase and back into the page without any delay. (If you don't count me trying to find the add "button".)
&lt;/p&gt;
&lt;figure&gt;
  &lt;img src='/assets/images/posts/front-end-dev/experiment-personal-json-api/by-golly-it-works.gif'&gt;
&lt;/figure&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;
  Now I know that it works and in looking at the documentation I'll be able to set the number of items to find and assign ordering. Next up is figuring out what I would like to record and then refactoring the code.
&lt;/p&gt;
&lt;p&gt;
  Recent Finds is something that I would like to keep, but I think it could benefit from a date as well. I'll need to make sure that I have a field for that and pre-populate today's date. I'm also thinking of tracking some personal stuff like workouts and beers consumed because they have a cause and effect relationship that might be interesting to see as a joke.
&lt;/p&gt;
&lt;p&gt;
  For the Coffeescript, I'll use &lt;a href="https://github.com/spellbook/spellbook"&gt;Spellbook&lt;/a&gt; for our organization practices and stop polluting the global space with all of that jelly.
&lt;/p&gt;
</content>
  </entry>
</feed>
